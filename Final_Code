{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Data 102 Final Project.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Notebook Setup"
      ],
      "metadata": {
        "id": "lakbsEFCRruV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "Fxhi0iIc8Vr9"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import seaborn as sns\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import scipy.stats\n",
        "from matplotlib.pyplot import figure\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "import warnings"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MS4dku5C96by",
        "outputId": "b4a35a65-adf4-401e-ebfe-67713d3ae53b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "warnings.filterwarnings('ignore')\n",
        "np.random.seed(seed = 42)"
      ],
      "metadata": {
        "id": "5iwnhAJGQ-oP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Research Question 1: Predicting All-Star Status of MLB Pitchers"
      ],
      "metadata": {
        "id": "sgFT93RHR5te"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### MLB Pitching Data: Pre-processing and cleaning"
      ],
      "metadata": {
        "id": "to9uS2N7R3Rr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pitching = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/data/core/Pitching.csv')\n",
        "pitching = pitching[pitching['yearID'] > 1984]\n",
        "pitching = pitching[pitching['yearID'] < 2020]\n",
        "pitching = pitching[pitching['yearID'] != 1994]\n",
        "pitching"
      ],
      "metadata": {
        "id": "gRScMuzBQ-bP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "04739548-64b1-4c07-d6ab-9415c2448b42"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>playerID</th>\n",
              "      <th>yearID</th>\n",
              "      <th>stint</th>\n",
              "      <th>teamID</th>\n",
              "      <th>lgID</th>\n",
              "      <th>W</th>\n",
              "      <th>L</th>\n",
              "      <th>G</th>\n",
              "      <th>GS</th>\n",
              "      <th>CG</th>\n",
              "      <th>SHO</th>\n",
              "      <th>SV</th>\n",
              "      <th>IPouts</th>\n",
              "      <th>H</th>\n",
              "      <th>ER</th>\n",
              "      <th>HR</th>\n",
              "      <th>BB</th>\n",
              "      <th>SO</th>\n",
              "      <th>BAOpp</th>\n",
              "      <th>ERA</th>\n",
              "      <th>IBB</th>\n",
              "      <th>WP</th>\n",
              "      <th>HBP</th>\n",
              "      <th>BK</th>\n",
              "      <th>BFP</th>\n",
              "      <th>GF</th>\n",
              "      <th>R</th>\n",
              "      <th>SH</th>\n",
              "      <th>SF</th>\n",
              "      <th>GIDP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24984</th>\n",
              "      <td>aasedo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>BAL</td>\n",
              "      <td>AL</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>264</td>\n",
              "      <td>83</td>\n",
              "      <td>37</td>\n",
              "      <td>6</td>\n",
              "      <td>35</td>\n",
              "      <td>67</td>\n",
              "      <td>0.258</td>\n",
              "      <td>3.78</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>366.0</td>\n",
              "      <td>43</td>\n",
              "      <td>44</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24985</th>\n",
              "      <td>abregjo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>CHN</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>72</td>\n",
              "      <td>32</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>13</td>\n",
              "      <td>0.352</td>\n",
              "      <td>6.38</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24986</th>\n",
              "      <td>ackerji01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>61</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>259</td>\n",
              "      <td>86</td>\n",
              "      <td>31</td>\n",
              "      <td>7</td>\n",
              "      <td>43</td>\n",
              "      <td>42</td>\n",
              "      <td>0.268</td>\n",
              "      <td>3.23</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>370.0</td>\n",
              "      <td>26</td>\n",
              "      <td>35</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24987</th>\n",
              "      <td>agostju01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>CHA</td>\n",
              "      <td>AL</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>181</td>\n",
              "      <td>45</td>\n",
              "      <td>24</td>\n",
              "      <td>3</td>\n",
              "      <td>23</td>\n",
              "      <td>39</td>\n",
              "      <td>0.210</td>\n",
              "      <td>3.58</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>246.0</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24988</th>\n",
              "      <td>aguilri01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>NYN</td>\n",
              "      <td>NL</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>21</td>\n",
              "      <td>19</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>367</td>\n",
              "      <td>118</td>\n",
              "      <td>44</td>\n",
              "      <td>8</td>\n",
              "      <td>37</td>\n",
              "      <td>74</td>\n",
              "      <td>0.258</td>\n",
              "      <td>3.24</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>507.0</td>\n",
              "      <td>1</td>\n",
              "      <td>49</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47624</th>\n",
              "      <td>zamorda01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>NYN</td>\n",
              "      <td>NL</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0.294</td>\n",
              "      <td>5.19</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47625</th>\n",
              "      <td>zeuchtj01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>20</td>\n",
              "      <td>0.250</td>\n",
              "      <td>4.76</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47626</th>\n",
              "      <td>zimmejo02</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>DET</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>23</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>336</td>\n",
              "      <td>145</td>\n",
              "      <td>86</td>\n",
              "      <td>19</td>\n",
              "      <td>25</td>\n",
              "      <td>82</td>\n",
              "      <td>0.311</td>\n",
              "      <td>6.91</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>504.0</td>\n",
              "      <td>0</td>\n",
              "      <td>89</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47627</th>\n",
              "      <td>zimmeky01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>KCA</td>\n",
              "      <td>AL</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55</td>\n",
              "      <td>28</td>\n",
              "      <td>22</td>\n",
              "      <td>2</td>\n",
              "      <td>19</td>\n",
              "      <td>18</td>\n",
              "      <td>0.337</td>\n",
              "      <td>10.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>3</td>\n",
              "      <td>22</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47628</th>\n",
              "      <td>zobribe01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>CHN</td>\n",
              "      <td>NL</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22153 rows × 30 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        playerID  yearID  stint teamID lgID   W  ...    BFP  GF   R   SH   SF  GIDP\n",
              "24984   aasedo01    1985      1    BAL   AL  10  ...  366.0  43  44  5.0  3.0  13.0\n",
              "24985  abregjo01    1985      1    CHN   NL   1  ...  109.0   0  18  5.0  1.0   3.0\n",
              "24986  ackerji01    1985      1    TOR   AL   7  ...  370.0  26  35  1.0  2.0  16.0\n",
              "24987  agostju01    1985      1    CHA   AL   4  ...  246.0  21  27  3.0  3.0   4.0\n",
              "24988  aguilri01    1985      1    NYN   NL  10  ...  507.0   1  49  7.0  4.0   8.0\n",
              "...          ...     ...    ...    ...  ...  ..  ...    ...  ..  ..  ...  ...   ...\n",
              "47624  zamorda01    2019      1    NYN   NL   0  ...   41.0   3   5  0.0  1.0   0.0\n",
              "47625  zeuchtj01    2019      1    TOR   AL   1  ...   99.0   0  13  0.0  0.0   1.0\n",
              "47626  zimmejo02    2019      1    DET   AL   1  ...  504.0   0  89  3.0  4.0   5.0\n",
              "47627  zimmeky01    2019      1    KCA   AL   0  ...  102.0   3  22  0.0  0.0   1.0\n",
              "47628  zobribe01    2019      1    CHN   NL   0  ...    5.0   1   0  0.0  0.0   0.0\n",
              "\n",
              "[22153 rows x 30 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### MLB All-Star Data from 1985-2019, excluding 1994, a walk-out year "
      ],
      "metadata": {
        "id": "uNHCXAk4SHHX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_star_full = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/data/core/AllstarFull.csv')\n",
        "all_star_full = all_star_full[all_star_full['yearID'] > 1984]\n",
        "all_star_full = all_star_full[all_star_full['yearID'] < 2020]\n",
        "all_star_full = all_star_full[all_star_full['yearID'] != 1994]\n",
        "all_star_full"
      ],
      "metadata": {
        "id": "Fou3-xpKSClX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "44d9b7f8-5c00-423d-e0be-3bafc3401d12"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>playerID</th>\n",
              "      <th>yearID</th>\n",
              "      <th>gameNum</th>\n",
              "      <th>gameID</th>\n",
              "      <th>teamID</th>\n",
              "      <th>lgID</th>\n",
              "      <th>GP</th>\n",
              "      <th>startingPos</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3035</th>\n",
              "      <td>morrija02</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS198507160</td>\n",
              "      <td>DET</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3036</th>\n",
              "      <td>fiskca01</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS198507160</td>\n",
              "      <td>CHA</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3037</th>\n",
              "      <td>murraed02</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS198507160</td>\n",
              "      <td>BAL</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3038</th>\n",
              "      <td>whitalo01</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS198507160</td>\n",
              "      <td>DET</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3039</th>\n",
              "      <td>brettge01</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS198507160</td>\n",
              "      <td>KCA</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5369</th>\n",
              "      <td>smithwi04</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS201907090</td>\n",
              "      <td>SFN</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5370</th>\n",
              "      <td>sorokmi01</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS201907090</td>\n",
              "      <td>ATL</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5371</th>\n",
              "      <td>storytr01</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS201907090</td>\n",
              "      <td>COL</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5372</th>\n",
              "      <td>woodrbr01</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS201907090</td>\n",
              "      <td>MIL</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5373</th>\n",
              "      <td>yateski01</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>ALS201907090</td>\n",
              "      <td>SDN</td>\n",
              "      <td>NL</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2280 rows × 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       playerID  yearID  gameNum        gameID teamID lgID  GP  startingPos\n",
              "3035  morrija02  1985.0      0.0  ALS198507160    DET   AL   1          1.0\n",
              "3036   fiskca01  1985.0      0.0  ALS198507160    CHA   AL   1          2.0\n",
              "3037  murraed02  1985.0      0.0  ALS198507160    BAL   AL   1          3.0\n",
              "3038  whitalo01  1985.0      0.0  ALS198507160    DET   AL   1          4.0\n",
              "3039  brettge01  1985.0      0.0  ALS198507160    KCA   AL   1          5.0\n",
              "...         ...     ...      ...           ...    ...  ...  ..          ...\n",
              "5369  smithwi04  2019.0      0.0  ALS201907090    SFN   NL   1          NaN\n",
              "5370  sorokmi01  2019.0      0.0  ALS201907090    ATL   NL   1          NaN\n",
              "5371  storytr01  2019.0      0.0  ALS201907090    COL   NL   1          NaN\n",
              "5372  woodrbr01  2019.0      0.0  ALS201907090    MIL   NL   1          NaN\n",
              "5373  yateski01  2019.0      0.0  ALS201907090    SDN   NL   0          NaN\n",
              "\n",
              "[2280 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Aggregating all-star data to pitching data"
      ],
      "metadata": {
        "id": "4ef9cPWdSOwc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "is_all_star = list()\n",
        "for i in range(len(pitching)):\n",
        "    pitcher = pitching.iloc[i, :]\n",
        "    pitcher_name = pitcher['playerID']\n",
        "    year = pitcher['yearID']\n",
        "    \n",
        "    all_star = all_star_full[all_star_full['yearID'] == year]\n",
        "    all_star = all_star[all_star['playerID'] == pitcher_name]\n",
        "    if(len(all_star) > 0):\n",
        "        is_all_star.append(True)\n",
        "    else:\n",
        "        is_all_star.append(False)\n",
        "#is_all_star"
      ],
      "metadata": {
        "id": "VuMWCT5BSTyi"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pitching['is_all_star'] = is_all_star\n",
        "pitching"
      ],
      "metadata": {
        "id": "fWDyA-SqScXh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "2cad4713-bf77-4de0-e299-f6b557e4b9c2"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>playerID</th>\n",
              "      <th>yearID</th>\n",
              "      <th>stint</th>\n",
              "      <th>teamID</th>\n",
              "      <th>lgID</th>\n",
              "      <th>W</th>\n",
              "      <th>L</th>\n",
              "      <th>G</th>\n",
              "      <th>GS</th>\n",
              "      <th>CG</th>\n",
              "      <th>SHO</th>\n",
              "      <th>SV</th>\n",
              "      <th>IPouts</th>\n",
              "      <th>H</th>\n",
              "      <th>ER</th>\n",
              "      <th>HR</th>\n",
              "      <th>BB</th>\n",
              "      <th>SO</th>\n",
              "      <th>BAOpp</th>\n",
              "      <th>ERA</th>\n",
              "      <th>IBB</th>\n",
              "      <th>WP</th>\n",
              "      <th>HBP</th>\n",
              "      <th>BK</th>\n",
              "      <th>BFP</th>\n",
              "      <th>GF</th>\n",
              "      <th>R</th>\n",
              "      <th>SH</th>\n",
              "      <th>SF</th>\n",
              "      <th>GIDP</th>\n",
              "      <th>is_all_star</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24984</th>\n",
              "      <td>aasedo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>BAL</td>\n",
              "      <td>AL</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>264</td>\n",
              "      <td>83</td>\n",
              "      <td>37</td>\n",
              "      <td>6</td>\n",
              "      <td>35</td>\n",
              "      <td>67</td>\n",
              "      <td>0.258</td>\n",
              "      <td>3.78</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>366.0</td>\n",
              "      <td>43</td>\n",
              "      <td>44</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24985</th>\n",
              "      <td>abregjo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>CHN</td>\n",
              "      <td>NL</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>72</td>\n",
              "      <td>32</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>13</td>\n",
              "      <td>0.352</td>\n",
              "      <td>6.38</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24986</th>\n",
              "      <td>ackerji01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>61</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>259</td>\n",
              "      <td>86</td>\n",
              "      <td>31</td>\n",
              "      <td>7</td>\n",
              "      <td>43</td>\n",
              "      <td>42</td>\n",
              "      <td>0.268</td>\n",
              "      <td>3.23</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>370.0</td>\n",
              "      <td>26</td>\n",
              "      <td>35</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24987</th>\n",
              "      <td>agostju01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>CHA</td>\n",
              "      <td>AL</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>181</td>\n",
              "      <td>45</td>\n",
              "      <td>24</td>\n",
              "      <td>3</td>\n",
              "      <td>23</td>\n",
              "      <td>39</td>\n",
              "      <td>0.210</td>\n",
              "      <td>3.58</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>246.0</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24988</th>\n",
              "      <td>aguilri01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>NYN</td>\n",
              "      <td>NL</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>21</td>\n",
              "      <td>19</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>367</td>\n",
              "      <td>118</td>\n",
              "      <td>44</td>\n",
              "      <td>8</td>\n",
              "      <td>37</td>\n",
              "      <td>74</td>\n",
              "      <td>0.258</td>\n",
              "      <td>3.24</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>507.0</td>\n",
              "      <td>1</td>\n",
              "      <td>49</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47624</th>\n",
              "      <td>zamorda01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>NYN</td>\n",
              "      <td>NL</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0.294</td>\n",
              "      <td>5.19</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47625</th>\n",
              "      <td>zeuchtj01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "      <td>22</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>20</td>\n",
              "      <td>0.250</td>\n",
              "      <td>4.76</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47626</th>\n",
              "      <td>zimmejo02</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>DET</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>23</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>336</td>\n",
              "      <td>145</td>\n",
              "      <td>86</td>\n",
              "      <td>19</td>\n",
              "      <td>25</td>\n",
              "      <td>82</td>\n",
              "      <td>0.311</td>\n",
              "      <td>6.91</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>504.0</td>\n",
              "      <td>0</td>\n",
              "      <td>89</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47627</th>\n",
              "      <td>zimmeky01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>KCA</td>\n",
              "      <td>AL</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>55</td>\n",
              "      <td>28</td>\n",
              "      <td>22</td>\n",
              "      <td>2</td>\n",
              "      <td>19</td>\n",
              "      <td>18</td>\n",
              "      <td>0.337</td>\n",
              "      <td>10.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>3</td>\n",
              "      <td>22</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47628</th>\n",
              "      <td>zobribe01</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>CHN</td>\n",
              "      <td>NL</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22153 rows × 31 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        playerID  yearID  stint teamID lgID  ...   R   SH   SF  GIDP  is_all_star\n",
              "24984   aasedo01    1985      1    BAL   AL  ...  44  5.0  3.0  13.0        False\n",
              "24985  abregjo01    1985      1    CHN   NL  ...  18  5.0  1.0   3.0        False\n",
              "24986  ackerji01    1985      1    TOR   AL  ...  35  1.0  2.0  16.0        False\n",
              "24987  agostju01    1985      1    CHA   AL  ...  27  3.0  3.0   4.0        False\n",
              "24988  aguilri01    1985      1    NYN   NL  ...  49  7.0  4.0   8.0        False\n",
              "...          ...     ...    ...    ...  ...  ...  ..  ...  ...   ...          ...\n",
              "47624  zamorda01    2019      1    NYN   NL  ...   5  0.0  1.0   0.0        False\n",
              "47625  zeuchtj01    2019      1    TOR   AL  ...  13  0.0  0.0   1.0        False\n",
              "47626  zimmejo02    2019      1    DET   AL  ...  89  3.0  4.0   5.0        False\n",
              "47627  zimmeky01    2019      1    KCA   AL  ...  22  0.0  0.0   1.0        False\n",
              "47628  zobribe01    2019      1    CHN   NL  ...   0  0.0  0.0   0.0        False\n",
              "\n",
              "[22153 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Splitting data to ensure equal distribution of all-stars and non-all-stars.\n",
        "#### *Useful for maintaining precision*"
      ],
      "metadata": {
        "id": "Ip-Fkw6VShtb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pitching_all_stars = pitching[pitching['is_all_star'] == True]\n",
        "pitching_not_all_stars_sample = pitching[pitching['is_all_star'] == False].sample(len(pitching_all_stars))\n",
        "pitching = pd.concat([pitching_all_stars, pitching_not_all_stars_sample])\n",
        "pitching"
      ],
      "metadata": {
        "id": "ZaIAnPcVSiNj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "74282ff6-ef94-47ec-cba5-a91952f50f6b"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>playerID</th>\n",
              "      <th>yearID</th>\n",
              "      <th>stint</th>\n",
              "      <th>teamID</th>\n",
              "      <th>lgID</th>\n",
              "      <th>W</th>\n",
              "      <th>L</th>\n",
              "      <th>G</th>\n",
              "      <th>GS</th>\n",
              "      <th>CG</th>\n",
              "      <th>SHO</th>\n",
              "      <th>SV</th>\n",
              "      <th>IPouts</th>\n",
              "      <th>H</th>\n",
              "      <th>ER</th>\n",
              "      <th>HR</th>\n",
              "      <th>BB</th>\n",
              "      <th>SO</th>\n",
              "      <th>BAOpp</th>\n",
              "      <th>ERA</th>\n",
              "      <th>IBB</th>\n",
              "      <th>WP</th>\n",
              "      <th>HBP</th>\n",
              "      <th>BK</th>\n",
              "      <th>BFP</th>\n",
              "      <th>GF</th>\n",
              "      <th>R</th>\n",
              "      <th>SH</th>\n",
              "      <th>SF</th>\n",
              "      <th>GIDP</th>\n",
              "      <th>is_all_star</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24993</th>\n",
              "      <td>andujjo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>SLN</td>\n",
              "      <td>NL</td>\n",
              "      <td>21</td>\n",
              "      <td>12</td>\n",
              "      <td>38</td>\n",
              "      <td>38</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>809</td>\n",
              "      <td>265</td>\n",
              "      <td>102</td>\n",
              "      <td>15</td>\n",
              "      <td>82</td>\n",
              "      <td>112</td>\n",
              "      <td>0.260</td>\n",
              "      <td>3.40</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1127.0</td>\n",
              "      <td>0</td>\n",
              "      <td>113</td>\n",
              "      <td>11.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25016</th>\n",
              "      <td>blylebe01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>CLE</td>\n",
              "      <td>AL</td>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "      <td>23</td>\n",
              "      <td>23</td>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>539</td>\n",
              "      <td>163</td>\n",
              "      <td>65</td>\n",
              "      <td>14</td>\n",
              "      <td>49</td>\n",
              "      <td>129</td>\n",
              "      <td>0.240</td>\n",
              "      <td>3.26</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1</td>\n",
              "      <td>743.0</td>\n",
              "      <td>0</td>\n",
              "      <td>76</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25017</th>\n",
              "      <td>blylebe01</td>\n",
              "      <td>1985</td>\n",
              "      <td>2</td>\n",
              "      <td>MIN</td>\n",
              "      <td>AL</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>342</td>\n",
              "      <td>101</td>\n",
              "      <td>38</td>\n",
              "      <td>9</td>\n",
              "      <td>26</td>\n",
              "      <td>77</td>\n",
              "      <td>0.237</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>460.0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25070</th>\n",
              "      <td>darliro01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>NYN</td>\n",
              "      <td>NL</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "      <td>36</td>\n",
              "      <td>35</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>744</td>\n",
              "      <td>214</td>\n",
              "      <td>80</td>\n",
              "      <td>21</td>\n",
              "      <td>114</td>\n",
              "      <td>167</td>\n",
              "      <td>0.235</td>\n",
              "      <td>2.90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1043.0</td>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>13.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25113</th>\n",
              "      <td>garresc01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>SFN</td>\n",
              "      <td>NL</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>74</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>317</td>\n",
              "      <td>76</td>\n",
              "      <td>27</td>\n",
              "      <td>2</td>\n",
              "      <td>58</td>\n",
              "      <td>106</td>\n",
              "      <td>0.198</td>\n",
              "      <td>2.30</td>\n",
              "      <td>12.0</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>454.0</td>\n",
              "      <td>44</td>\n",
              "      <td>37</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31291</th>\n",
              "      <td>irabuhi01</td>\n",
              "      <td>1997</td>\n",
              "      <td>1</td>\n",
              "      <td>NYA</td>\n",
              "      <td>AL</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>13</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>160</td>\n",
              "      <td>69</td>\n",
              "      <td>42</td>\n",
              "      <td>15</td>\n",
              "      <td>20</td>\n",
              "      <td>56</td>\n",
              "      <td>0.311</td>\n",
              "      <td>7.09</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>246.0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27803</th>\n",
              "      <td>willsfr01</td>\n",
              "      <td>1990</td>\n",
              "      <td>1</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>44</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>297</td>\n",
              "      <td>101</td>\n",
              "      <td>52</td>\n",
              "      <td>13</td>\n",
              "      <td>38</td>\n",
              "      <td>72</td>\n",
              "      <td>0.266</td>\n",
              "      <td>4.73</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>422.0</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27301</th>\n",
              "      <td>akerfda01</td>\n",
              "      <td>1990</td>\n",
              "      <td>1</td>\n",
              "      <td>PHI</td>\n",
              "      <td>NL</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>71</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>279</td>\n",
              "      <td>65</td>\n",
              "      <td>39</td>\n",
              "      <td>10</td>\n",
              "      <td>54</td>\n",
              "      <td>42</td>\n",
              "      <td>0.201</td>\n",
              "      <td>3.77</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>395.0</td>\n",
              "      <td>18</td>\n",
              "      <td>45</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25365</th>\n",
              "      <td>swaggbi01</td>\n",
              "      <td>1985</td>\n",
              "      <td>1</td>\n",
              "      <td>BAL</td>\n",
              "      <td>AL</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0.375</td>\n",
              "      <td>5.40</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33478</th>\n",
              "      <td>suzukma01</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "      <td>KCA</td>\n",
              "      <td>AL</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>32</td>\n",
              "      <td>29</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>566</td>\n",
              "      <td>195</td>\n",
              "      <td>91</td>\n",
              "      <td>26</td>\n",
              "      <td>94</td>\n",
              "      <td>135</td>\n",
              "      <td>0.265</td>\n",
              "      <td>4.34</td>\n",
              "      <td>6.0</td>\n",
              "      <td>11</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>839.0</td>\n",
              "      <td>0</td>\n",
              "      <td>100</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1744 rows × 31 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        playerID  yearID  stint teamID lgID  ...    R    SH   SF  GIDP  is_all_star\n",
              "24993  andujjo01    1985      1    SLN   NL  ...  113  11.0  4.0  32.0         True\n",
              "25016  blylebe01    1985      1    CLE   AL  ...   76   4.0  4.0  11.0         True\n",
              "25017  blylebe01    1985      2    MIN   AL  ...   45   1.0  4.0  10.0         True\n",
              "25070  darliro01    1985      1    NYN   NL  ...   93  13.0  4.0  23.0         True\n",
              "25113  garresc01    1985      1    SFN   NL  ...   37   6.0  3.0   6.0         True\n",
              "...          ...     ...    ...    ...  ...  ...  ...   ...  ...   ...          ...\n",
              "31291  irabuhi01    1997      1    NYA   AL  ...   47   1.0  2.0   2.0        False\n",
              "27803  willsfr01    1990      1    TOR   AL  ...   54   2.0  1.0  14.0        False\n",
              "27301  akerfda01    1990      1    PHI   NL  ...   45   9.0  5.0   8.0        False\n",
              "25365  swaggbi01    1985      1    BAL   AL  ...    1   0.0  0.0   0.0        False\n",
              "33478  suzukma01    2000      1    KCA   AL  ...  100   2.0  3.0  16.0        False\n",
              "\n",
              "[1744 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pitching.columns"
      ],
      "metadata": {
        "id": "O2w9BeXESmDW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d9ab196-a25f-4691-8abb-59d65e45309f"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['playerID', 'yearID', 'stint', 'teamID', 'lgID', 'W', 'L', 'G', 'GS',\n",
              "       'CG', 'SHO', 'SV', 'IPouts', 'H', 'ER', 'HR', 'BB', 'SO', 'BAOpp',\n",
              "       'ERA', 'IBB', 'WP', 'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF', 'GIDP',\n",
              "       'is_all_star'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Column Selection - Relevant Pitching Statistics"
      ],
      "metadata": {
        "id": "UTlWr366SqCG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pitching = pitching.drop(columns = ['stint', 'lgID', 'W', 'L', 'G', 'GS', 'CG', 'SV', 'IPouts', 'IBB', 'BK', 'BFP', 'GF', 'SH', 'SF'])\n",
        "pitching"
      ],
      "metadata": {
        "id": "QbB8gL4vSmKx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "6f1907b6-0dbc-4eb7-c463-b4730458c415"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>playerID</th>\n",
              "      <th>yearID</th>\n",
              "      <th>teamID</th>\n",
              "      <th>SHO</th>\n",
              "      <th>H</th>\n",
              "      <th>ER</th>\n",
              "      <th>HR</th>\n",
              "      <th>BB</th>\n",
              "      <th>SO</th>\n",
              "      <th>BAOpp</th>\n",
              "      <th>ERA</th>\n",
              "      <th>WP</th>\n",
              "      <th>HBP</th>\n",
              "      <th>R</th>\n",
              "      <th>GIDP</th>\n",
              "      <th>is_all_star</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24993</th>\n",
              "      <td>andujjo01</td>\n",
              "      <td>1985</td>\n",
              "      <td>SLN</td>\n",
              "      <td>2</td>\n",
              "      <td>265</td>\n",
              "      <td>102</td>\n",
              "      <td>15</td>\n",
              "      <td>82</td>\n",
              "      <td>112</td>\n",
              "      <td>0.260</td>\n",
              "      <td>3.40</td>\n",
              "      <td>2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>113</td>\n",
              "      <td>32.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25016</th>\n",
              "      <td>blylebe01</td>\n",
              "      <td>1985</td>\n",
              "      <td>CLE</td>\n",
              "      <td>4</td>\n",
              "      <td>163</td>\n",
              "      <td>65</td>\n",
              "      <td>14</td>\n",
              "      <td>49</td>\n",
              "      <td>129</td>\n",
              "      <td>0.240</td>\n",
              "      <td>3.26</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>76</td>\n",
              "      <td>11.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25017</th>\n",
              "      <td>blylebe01</td>\n",
              "      <td>1985</td>\n",
              "      <td>MIN</td>\n",
              "      <td>1</td>\n",
              "      <td>101</td>\n",
              "      <td>38</td>\n",
              "      <td>9</td>\n",
              "      <td>26</td>\n",
              "      <td>77</td>\n",
              "      <td>0.237</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3</td>\n",
              "      <td>2.0</td>\n",
              "      <td>45</td>\n",
              "      <td>10.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25070</th>\n",
              "      <td>darliro01</td>\n",
              "      <td>1985</td>\n",
              "      <td>NYN</td>\n",
              "      <td>2</td>\n",
              "      <td>214</td>\n",
              "      <td>80</td>\n",
              "      <td>21</td>\n",
              "      <td>114</td>\n",
              "      <td>167</td>\n",
              "      <td>0.235</td>\n",
              "      <td>2.90</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>93</td>\n",
              "      <td>23.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25113</th>\n",
              "      <td>garresc01</td>\n",
              "      <td>1985</td>\n",
              "      <td>SFN</td>\n",
              "      <td>0</td>\n",
              "      <td>76</td>\n",
              "      <td>27</td>\n",
              "      <td>2</td>\n",
              "      <td>58</td>\n",
              "      <td>106</td>\n",
              "      <td>0.198</td>\n",
              "      <td>2.30</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>37</td>\n",
              "      <td>6.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31291</th>\n",
              "      <td>irabuhi01</td>\n",
              "      <td>1997</td>\n",
              "      <td>NYA</td>\n",
              "      <td>0</td>\n",
              "      <td>69</td>\n",
              "      <td>42</td>\n",
              "      <td>15</td>\n",
              "      <td>20</td>\n",
              "      <td>56</td>\n",
              "      <td>0.311</td>\n",
              "      <td>7.09</td>\n",
              "      <td>4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>47</td>\n",
              "      <td>2.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27803</th>\n",
              "      <td>willsfr01</td>\n",
              "      <td>1990</td>\n",
              "      <td>TOR</td>\n",
              "      <td>0</td>\n",
              "      <td>101</td>\n",
              "      <td>52</td>\n",
              "      <td>13</td>\n",
              "      <td>38</td>\n",
              "      <td>72</td>\n",
              "      <td>0.266</td>\n",
              "      <td>4.73</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>54</td>\n",
              "      <td>14.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27301</th>\n",
              "      <td>akerfda01</td>\n",
              "      <td>1990</td>\n",
              "      <td>PHI</td>\n",
              "      <td>0</td>\n",
              "      <td>65</td>\n",
              "      <td>39</td>\n",
              "      <td>10</td>\n",
              "      <td>54</td>\n",
              "      <td>42</td>\n",
              "      <td>0.201</td>\n",
              "      <td>3.77</td>\n",
              "      <td>7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>45</td>\n",
              "      <td>8.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25365</th>\n",
              "      <td>swaggbi01</td>\n",
              "      <td>1985</td>\n",
              "      <td>BAL</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0.375</td>\n",
              "      <td>5.40</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33478</th>\n",
              "      <td>suzukma01</td>\n",
              "      <td>2000</td>\n",
              "      <td>KCA</td>\n",
              "      <td>1</td>\n",
              "      <td>195</td>\n",
              "      <td>91</td>\n",
              "      <td>26</td>\n",
              "      <td>94</td>\n",
              "      <td>135</td>\n",
              "      <td>0.265</td>\n",
              "      <td>4.34</td>\n",
              "      <td>11</td>\n",
              "      <td>3.0</td>\n",
              "      <td>100</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1744 rows × 16 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        playerID  yearID teamID  SHO    H  ...  WP   HBP    R  GIDP  is_all_star\n",
              "24993  andujjo01    1985    SLN    2  265  ...   2  11.0  113  32.0         True\n",
              "25016  blylebe01    1985    CLE    4  163  ...   1   7.0   76  11.0         True\n",
              "25017  blylebe01    1985    MIN    1  101  ...   3   2.0   45  10.0         True\n",
              "25070  darliro01    1985    NYN    2  214  ...   7   3.0   93  23.0         True\n",
              "25113  garresc01    1985    SFN    0   76  ...   7   3.0   37   6.0         True\n",
              "...          ...     ...    ...  ...  ...  ...  ..   ...  ...   ...          ...\n",
              "31291  irabuhi01    1997    NYA    0   69  ...   4   1.0   47   2.0        False\n",
              "27803  willsfr01    1990    TOR    0  101  ...   1   1.0   54  14.0        False\n",
              "27301  akerfda01    1990    PHI    0   65  ...   7   3.0   45   8.0        False\n",
              "25365  swaggbi01    1985    BAL    0    3  ...   0   0.0    1   0.0        False\n",
              "33478  suzukma01    2000    KCA    1  195  ...  11   3.0  100  16.0        False\n",
              "\n",
              "[1744 rows x 16 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pitching = pitching.dropna()\n",
        "pitching.loc[:,\"is_all_star\"] = pitching[\"is_all_star\"].astype(int)\n",
        "#pitching['is_all_star']"
      ],
      "metadata": {
        "id": "KeR6EJaQStZv"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### EDA: Boxplot Visualization for All-star vs. non All-star"
      ],
      "metadata": {
        "id": "GGXxYlaJSpf6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pitching_boxplots = pitching.copy()\n",
        "\n",
        "pitching_boxplots_is_all_star = pitching_boxplots['is_all_star']\n",
        "\n",
        "pitching_boxplots.drop(columns = ['is_all_star', 'yearID', 'playerID', 'teamID'], inplace = True)\n",
        "\n",
        "pitching_boxplots = (pitching_boxplots - pitching_boxplots.mean()) / pitching_boxplots.std()\n",
        "\n",
        "pitching_boxplots['is_all_star'] = pitching_boxplots_is_all_star\n",
        "\n",
        "fig, axes = plt.subplots(ncols = 12, figsize = (20, 8))\n",
        "pitching_boxplots.query(\"is_all_star in [0, 1]\").boxplot(by='is_all_star', return_type = 'axes', ax = axes)"
      ],
      "metadata": {
        "id": "71olakqUSmOJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 816
        },
        "outputId": "fe4c7261-71a5-4871-881f-19c5c0bb99e2"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/plotting/_matplotlib/boxplot.py:391: UserWarning: When passing multiple axes, sharex and sharey are ignored. These settings must be specified when creating axes\n",
            "  **kwds,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BAOpp         AxesSubplot(0.1,0.15;0.056338x0.75)\n",
              "BB       AxesSubplot(0.167606,0.15;0.056338x0.75)\n",
              "ER       AxesSubplot(0.235211,0.15;0.056338x0.75)\n",
              "ERA      AxesSubplot(0.302817,0.15;0.056338x0.75)\n",
              "GIDP     AxesSubplot(0.370423,0.15;0.056338x0.75)\n",
              "H        AxesSubplot(0.438028,0.15;0.056338x0.75)\n",
              "HBP      AxesSubplot(0.505634,0.15;0.056338x0.75)\n",
              "HR       AxesSubplot(0.573239,0.15;0.056338x0.75)\n",
              "R        AxesSubplot(0.640845,0.15;0.056338x0.75)\n",
              "SHO      AxesSubplot(0.708451,0.15;0.056338x0.75)\n",
              "SO       AxesSubplot(0.776056,0.15;0.056338x0.75)\n",
              "WP       AxesSubplot(0.843662,0.15;0.056338x0.75)\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x576 with 12 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### EDA: Visualization for Relevant Variable Correlations"
      ],
      "metadata": {
        "id": "HGVI85yaS1SO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pitching_boxplots.corr().style.background_gradient()#.format(precision = 2)"
      ],
      "metadata": {
        "id": "dESNMExxSmT7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "b1817fe5-e436-4bcf-834b-4229111935a1"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col0,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col2,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col5,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col6,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col7,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col2,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col11,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col12{\n",
              "            background-color:  #023858;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col3{\n",
              "            background-color:  #358fc0;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col2,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col0,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col12{\n",
              "            background-color:  #65a3cb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col3{\n",
              "            background-color:  #81aed2;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col4{\n",
              "            background-color:  #5a9ec9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col5{\n",
              "            background-color:  #2a88bc;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col6{\n",
              "            background-color:  #dddbec;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col7,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col7{\n",
              "            background-color:  #e8e4f0;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col0{\n",
              "            background-color:  #96b6d7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col9{\n",
              "            background-color:  #93b5d6;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col12,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col0{\n",
              "            background-color:  #62a2cb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col11{\n",
              "            background-color:  #509ac6;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col12,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col12,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col4{\n",
              "            background-color:  #6ba5cd;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col0{\n",
              "            background-color:  #3f93c2;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col2{\n",
              "            background-color:  #034165;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col10{\n",
              "            background-color:  #04588a;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col1{\n",
              "            background-color:  #045b8e;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col5{\n",
              "            background-color:  #045c90;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col6{\n",
              "            background-color:  #dad9ea;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col7,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col11{\n",
              "            background-color:  #f2ecf5;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col1{\n",
              "            background-color:  #348ebf;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col9{\n",
              "            background-color:  #2182b9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col1{\n",
              "            background-color:  #023f64;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col11,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col1{\n",
              "            background-color:  #045585;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col12{\n",
              "            background-color:  #3b92c1;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col2{\n",
              "            background-color:  #034e7b;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col4{\n",
              "            background-color:  #045788;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col5,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col5{\n",
              "            background-color:  #04649e;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col6{\n",
              "            background-color:  #d2d2e7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col9{\n",
              "            background-color:  #328dbf;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col9{\n",
              "            background-color:  #1c7fb8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col11{\n",
              "            background-color:  #045e94;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col12{\n",
              "            background-color:  #60a1ca;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col0{\n",
              "            background-color:  #83afd3;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col4{\n",
              "            background-color:  #045687;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col6{\n",
              "            background-color:  #0569a5;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col5{\n",
              "            background-color:  #0567a2;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col6,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col6{\n",
              "            background-color:  #d9d8ea;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col7,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col6{\n",
              "            background-color:  #eae6f1;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col8{\n",
              "            background-color:  #569dc8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col3{\n",
              "            background-color:  #034f7d;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col11{\n",
              "            background-color:  #0570b0;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col0{\n",
              "            background-color:  #67a4cc;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col2{\n",
              "            background-color:  #04598c;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col7{\n",
              "            background-color:  #056ba9;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col5{\n",
              "            background-color:  #046299;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col6,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col7{\n",
              "            background-color:  #e9e5f1;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col7,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col7{\n",
              "            background-color:  #f1ebf5;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col4{\n",
              "            background-color:  #1379b5;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col9{\n",
              "            background-color:  #2484ba;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col11,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col4{\n",
              "            background-color:  #0567a1;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col12{\n",
              "            background-color:  #4a98c5;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col0{\n",
              "            background-color:  #4697c4;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col10{\n",
              "            background-color:  #045f95;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col2{\n",
              "            background-color:  #056ba7;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col3{\n",
              "            background-color:  #056dab;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col4{\n",
              "            background-color:  #05659f;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col6{\n",
              "            background-color:  #f8f1f8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col7{\n",
              "            background-color:  #fbf3f9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col8{\n",
              "            background-color:  #2786bb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col10{\n",
              "            background-color:  #056aa6;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col11{\n",
              "            background-color:  #0f76b3;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col12{\n",
              "            background-color:  #0d75b3;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col0{\n",
              "            background-color:  #fef6fa;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col1{\n",
              "            background-color:  #f3edf5;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col2{\n",
              "            background-color:  #f5eef6;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col5{\n",
              "            background-color:  #faf2f8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col5,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col8,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col12,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col0,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col1,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col2,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col3,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col9,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col10,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col11,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col6,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col7{\n",
              "            background-color:  #fff7fb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col10{\n",
              "            background-color:  #f4eef6;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col8{\n",
              "            background-color:  #fbf4f9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col12{\n",
              "            background-color:  #f7f0f7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col0{\n",
              "            background-color:  #a5bddb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col2{\n",
              "            background-color:  #3d93c2;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col3{\n",
              "            background-color:  #63a2cb;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col5{\n",
              "            background-color:  #197db7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col7{\n",
              "            background-color:  #eee9f3;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col9{\n",
              "            background-color:  #80aed2;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col10{\n",
              "            background-color:  #3991c1;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col11,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col8{\n",
              "            background-color:  #549cc7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col1{\n",
              "            background-color:  #1b7eb7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col2{\n",
              "            background-color:  #2081b9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col4,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col10{\n",
              "            background-color:  #1e80b8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col5,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col5{\n",
              "            background-color:  #1278b4;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col6{\n",
              "            background-color:  #e1dfed;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col7{\n",
              "            background-color:  #ece7f2;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col8{\n",
              "            background-color:  #76aad0;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col11{\n",
              "            background-color:  #2c89bd;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col6{\n",
              "            background-color:  #d2d3e7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col8{\n",
              "            background-color:  #308cbe;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col11{\n",
              "            background-color:  #045e93;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col12{\n",
              "            background-color:  #5ea0ca;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col0{\n",
              "            background-color:  #5c9fc9;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col2{\n",
              "            background-color:  #046096;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col3{\n",
              "            background-color:  #0c74b2;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col5{\n",
              "            background-color:  #056faf;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col12{\n",
              "            background-color:  #4e9ac6;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col0{\n",
              "            background-color:  #99b8d8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col1{\n",
              "            background-color:  #589ec8;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col2,#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col3{\n",
              "            background-color:  #8eb3d5;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col8{\n",
              "            background-color:  #84b0d3;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col9{\n",
              "            background-color:  #94b6d7;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col10{\n",
              "            background-color:  #8bb2d4;\n",
              "            color:  #000000;\n",
              "        }#T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col11{\n",
              "            background-color:  #71a8ce;\n",
              "            color:  #000000;\n",
              "        }</style><table id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002\" class=\"dataframe\"><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >SHO</th>        <th class=\"col_heading level0 col1\" >H</th>        <th class=\"col_heading level0 col2\" >ER</th>        <th class=\"col_heading level0 col3\" >HR</th>        <th class=\"col_heading level0 col4\" >BB</th>        <th class=\"col_heading level0 col5\" >SO</th>        <th class=\"col_heading level0 col6\" >BAOpp</th>        <th class=\"col_heading level0 col7\" >ERA</th>        <th class=\"col_heading level0 col8\" >WP</th>        <th class=\"col_heading level0 col9\" >HBP</th>        <th class=\"col_heading level0 col10\" >R</th>        <th class=\"col_heading level0 col11\" >GIDP</th>        <th class=\"col_heading level0 col12\" >is_all_star</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >SHO</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col1\" class=\"data row0 col1\" >0.559741</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col2\" class=\"data row0 col2\" >0.475347</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col3\" class=\"data row0 col3\" >0.399520</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col4\" class=\"data row0 col4\" >0.471750</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col5\" class=\"data row0 col5\" >0.545894</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col6\" class=\"data row0 col6\" >-0.105117</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col7\" class=\"data row0 col7\" >-0.116199</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col8\" class=\"data row0 col8\" >0.306589</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col9\" class=\"data row0 col9\" >0.346431</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col10\" class=\"data row0 col10\" >0.482736</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col11\" class=\"data row0 col11\" >0.496210</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row0_col12\" class=\"data row0 col12\" >0.340963</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >H</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col0\" class=\"data row1 col0\" >0.559741</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col2\" class=\"data row1 col2\" >0.963085</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col3\" class=\"data row1 col3\" >0.867041</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col4\" class=\"data row1 col4\" >0.846513</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col5\" class=\"data row1 col5\" >0.819148</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col6\" class=\"data row1 col6\" >-0.089892</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col7\" class=\"data row1 col7\" >-0.184439</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col8\" class=\"data row1 col8\" >0.562807</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col9\" class=\"data row1 col9\" >0.636030</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col10\" class=\"data row1 col10\" >0.966271</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col11\" class=\"data row1 col11\" >0.874983</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row1_col12\" class=\"data row1 col12\" >0.473163</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >ER</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col0\" class=\"data row2 col0\" >0.475347</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col1\" class=\"data row2 col1\" >0.963085</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col3\" class=\"data row2 col3\" >0.906712</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col4\" class=\"data row2 col4\" >0.864342</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col5\" class=\"data row2 col5\" >0.755035</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col6\" class=\"data row2 col6\" >-0.034393</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col7\" class=\"data row2 col7\" >-0.112561</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col8\" class=\"data row2 col8\" >0.567881</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col9\" class=\"data row2 col9\" >0.647041</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col10\" class=\"data row2 col10\" >0.996347</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col11\" class=\"data row2 col11\" >0.822808</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row2_col12\" class=\"data row2 col12\" >0.371389</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >HR</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col0\" class=\"data row3 col0\" >0.399520</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col1\" class=\"data row3 col1\" >0.867041</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col2\" class=\"data row3 col2\" >0.906712</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col4\" class=\"data row3 col4\" >0.748885</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col5\" class=\"data row3 col5\" >0.738768</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col6\" class=\"data row3 col6\" >-0.079314</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col7\" class=\"data row3 col7\" >-0.122397</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col8\" class=\"data row3 col8\" >0.477377</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col9\" class=\"data row3 col9\" >0.581535</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col10\" class=\"data row3 col10\" >0.900628</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col11\" class=\"data row3 col11\" >0.701496</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row3_col12\" class=\"data row3 col12\" >0.368182</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >BB</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col0\" class=\"data row4 col0\" >0.471750</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col1\" class=\"data row4 col1\" >0.846513</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col2\" class=\"data row4 col2\" >0.864342</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col3\" class=\"data row4 col3\" >0.748885</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col5\" class=\"data row4 col5\" >0.775329</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col6\" class=\"data row4 col6\" >-0.177592</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col7\" class=\"data row4 col7\" >-0.181450</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col8\" class=\"data row4 col8\" >0.659578</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col9\" class=\"data row4 col9\" >0.627103</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col10\" class=\"data row4 col10\" >0.868448</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col11\" class=\"data row4 col11\" >0.765668</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row4_col12\" class=\"data row4 col12\" >0.431232</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >SO</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col0\" class=\"data row5 col0\" >0.545894</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col1\" class=\"data row5 col1\" >0.819148</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col2\" class=\"data row5 col2\" >0.755035</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col3\" class=\"data row5 col3\" >0.738768</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col4\" class=\"data row5 col4\" >0.775329</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col6\" class=\"data row5 col6\" >-0.310156</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col7\" class=\"data row5 col7\" >-0.263102</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col8\" class=\"data row5 col8\" >0.601591</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col9\" class=\"data row5 col9\" >0.627677</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col10\" class=\"data row5 col10\" >0.756965</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col11\" class=\"data row5 col11\" >0.673431</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row5_col12\" class=\"data row5 col12\" >0.629126</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >BAOpp</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col0\" class=\"data row6 col0\" >-0.105117</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col1\" class=\"data row6 col1\" >-0.089892</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col2\" class=\"data row6 col2\" >-0.034393</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col3\" class=\"data row6 col3\" >-0.079314</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col4\" class=\"data row6 col4\" >-0.177592</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col5\" class=\"data row6 col5\" >-0.310156</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col7\" class=\"data row6 col7\" >0.709551</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col8\" class=\"data row6 col8\" >-0.184206</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col9\" class=\"data row6 col9\" >-0.133265</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col10\" class=\"data row6 col10\" >-0.037825</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col11\" class=\"data row6 col11\" >-0.081495</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row6_col12\" class=\"data row6 col12\" >-0.369262</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >ERA</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col0\" class=\"data row7 col0\" >-0.116199</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col1\" class=\"data row7 col1\" >-0.184439</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col2\" class=\"data row7 col2\" >-0.112561</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col3\" class=\"data row7 col3\" >-0.122397</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col4\" class=\"data row7 col4\" >-0.181450</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col5\" class=\"data row7 col5\" >-0.263102</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col6\" class=\"data row7 col6\" >0.709551</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col8\" class=\"data row7 col8\" >-0.153004</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col9\" class=\"data row7 col9\" >-0.131942</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col10\" class=\"data row7 col10\" >-0.118509</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col11\" class=\"data row7 col11\" >-0.181210</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row7_col12\" class=\"data row7 col12\" >-0.299131</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >WP</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col0\" class=\"data row8 col0\" >0.306589</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col1\" class=\"data row8 col1\" >0.562807</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col2\" class=\"data row8 col2\" >0.567881</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col3\" class=\"data row8 col3\" >0.477377</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col4\" class=\"data row8 col4\" >0.659578</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col5\" class=\"data row8 col5\" >0.601591</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col6\" class=\"data row8 col6\" >-0.184206</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col7\" class=\"data row8 col7\" >-0.153004</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col9\" class=\"data row8 col9\" >0.398691</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col10\" class=\"data row8 col10\" >0.572591</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col11\" class=\"data row8 col11\" >0.486165</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row8_col12\" class=\"data row8 col12\" >0.357588</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >HBP</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col0\" class=\"data row9 col0\" >0.346431</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col1\" class=\"data row9 col1\" >0.636030</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col2\" class=\"data row9 col2\" >0.647041</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col3\" class=\"data row9 col3\" >0.581535</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col4\" class=\"data row9 col4\" >0.627103</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col5\" class=\"data row9 col5\" >0.627677</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col6\" class=\"data row9 col6\" >-0.133265</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col7\" class=\"data row9 col7\" >-0.131942</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col8\" class=\"data row9 col8\" >0.398691</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col10\" class=\"data row9 col10\" >0.648541</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col11\" class=\"data row9 col11\" >0.586813</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row9_col12\" class=\"data row9 col12\" >0.342043</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >R</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col0\" class=\"data row10 col0\" >0.482736</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col1\" class=\"data row10 col1\" >0.966271</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col2\" class=\"data row10 col2\" >0.996347</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col3\" class=\"data row10 col3\" >0.900628</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col4\" class=\"data row10 col4\" >0.868448</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col5\" class=\"data row10 col5\" >0.756965</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col6\" class=\"data row10 col6\" >-0.037825</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col7\" class=\"data row10 col7\" >-0.118509</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col8\" class=\"data row10 col8\" >0.572591</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col9\" class=\"data row10 col9\" >0.648541</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col11\" class=\"data row10 col11\" >0.827832</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row10_col12\" class=\"data row10 col12\" >0.375222</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >GIDP</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col0\" class=\"data row11 col0\" >0.496210</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col1\" class=\"data row11 col1\" >0.874983</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col2\" class=\"data row11 col2\" >0.822808</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col3\" class=\"data row11 col3\" >0.701496</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col4\" class=\"data row11 col4\" >0.765668</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col5\" class=\"data row11 col5\" >0.673431</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col6\" class=\"data row11 col6\" >-0.081495</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col7\" class=\"data row11 col7\" >-0.181210</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col8\" class=\"data row11 col8\" >0.486165</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col9\" class=\"data row11 col9\" >0.586813</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col10\" class=\"data row11 col10\" >0.827832</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row11_col12\" class=\"data row11 col12\" >0.417973</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >is_all_star</th>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col0\" class=\"data row12 col0\" >0.340963</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col1\" class=\"data row12 col1\" >0.473163</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col2\" class=\"data row12 col2\" >0.371389</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col3\" class=\"data row12 col3\" >0.368182</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col4\" class=\"data row12 col4\" >0.431232</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col5\" class=\"data row12 col5\" >0.629126</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col6\" class=\"data row12 col6\" >-0.369262</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col7\" class=\"data row12 col7\" >-0.299131</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col8\" class=\"data row12 col8\" >0.357588</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col9\" class=\"data row12 col9\" >0.342043</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col10\" class=\"data row12 col10\" >0.375222</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col11\" class=\"data row12 col11\" >0.417973</td>\n",
              "                        <td id=\"T_bcb1987a_5be4_11ec_b3d8_0242ac1c0002row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f6dcf7e6510>"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Splitting Data for Training and Testing"
      ],
      "metadata": {
        "id": "o0tAgd9HSklP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train, test = train_test_split(pitching, random_state = 42)\n",
        "\n",
        "X_train = train.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star'])\n",
        "y_train = train['is_all_star']\n",
        "\n",
        "X_test = test.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star'])\n",
        "y_test = test['is_all_star']"
      ],
      "metadata": {
        "id": "IsfKZbXUS9IR"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling - Random Forest"
      ],
      "metadata": {
        "id": "RheNt60VTDR7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "forest_model = RandomForestClassifier(random_state = 42, n_jobs = 1)\n",
        "fitted = forest_model.fit(X_train, y_train)\n",
        "rf_predictions_test = fitted.predict(X_test)\n",
        "rf_predictions_train = fitted.predict(X_train)"
      ],
      "metadata": {
        "id": "Im3IfMlJTFFT"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training and Test Accuracy for Initial Random Forest Model"
      ],
      "metadata": {
        "id": "omF00TrSTG0m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('training accuracy for random forest: ')\n",
        "np.mean(y_train == rf_predictions_train)"
      ],
      "metadata": {
        "id": "1-GlNUIlTLCi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "428a075e-ff57-4683-9d11-7e9d9a44cee6"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training accuracy for random forest: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9992354740061162"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('test accuracy for random forest: ')\n",
        "np.mean(y_test == rf_predictions_test)"
      ],
      "metadata": {
        "id": "FXl9rVUdTLcq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de2db630-474b-4cb9-b9c2-295932e6f89f"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test accuracy for random forest: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8876146788990825"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Validation for Initial Random Forest Model"
      ],
      "metadata": {
        "id": "9nmhA-5NTLx4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix_rf = metrics.confusion_matrix(y_test, rf_predictions_test, normalize = 'all')\n",
        "precision_rf = confusion_matrix_rf[1][1] / (confusion_matrix_rf[1][1] + confusion_matrix_rf[0][1])\n",
        "recall_rf = confusion_matrix_rf[1][1] / (confusion_matrix_rf[1][1] + confusion_matrix_rf[1][0])\n",
        "print('precision: ' + str(precision_rf))\n",
        "print('recall: ' + str(recall_rf))"
      ],
      "metadata": {
        "id": "zB8fYaMiTMAR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2cc68314-4645-4855-b914-94be902db073"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "precision: 0.8844444444444445\n",
            "recall: 0.8963963963963965\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_fpr, rf_tpr, rf_thresholds = metrics.roc_curve(y_test, rf_predictions_test)\n",
        "rf_fpr, rf_tpr, rf_thresholds"
      ],
      "metadata": {
        "id": "wBtjmKPYTVAh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7346b76-421a-47cb-88e4-12d3f26e74ba"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.        , 0.12149533, 1.        ]),\n",
              " array([0.       , 0.8963964, 1.       ]),\n",
              " array([2, 1, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('FPR')\n",
        "plt.ylabel('TPR')\n",
        "plt.title('ROC Curve for the Random Forest Model')\n",
        "plt.plot(rf_fpr, rf_tpr)"
      ],
      "metadata": {
        "id": "_Dx9tq5LTV9C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "c494e40c-c0db-47ed-ba13-12e7bec28d4a"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6dd8576b10>]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling - Logistic Regression"
      ],
      "metadata": {
        "id": "MDRjyjJITZ9D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr_model = LogisticRegression(random_state = 42, max_iter = 2000, n_jobs = 1)\n",
        "fitted = lr_model.fit(X_train, y_train)\n",
        "lr_predictions_test = fitted.predict(X_test)\n",
        "lr_predictions_train = fitted.predict(X_train)"
      ],
      "metadata": {
        "id": "pw-xvT8HTaUb"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training and Test Accuracy for Initial Logistic Regression Model"
      ],
      "metadata": {
        "id": "F-fchXwnTeaC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('training accuracy for logistic regression: ')\n",
        "np.mean(y_train == lr_predictions_train)"
      ],
      "metadata": {
        "id": "Exl9pVJYTgf5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36c79233-2a40-48c0-f0fe-02753d2ae7e4"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training accuracy for logistic regression: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.849388379204893"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('test accuracy for logistic regression: ')\n",
        "np.mean(y_test == lr_predictions_test)"
      ],
      "metadata": {
        "id": "x4DpU36HTh9y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f14377f3-39a9-4109-b38a-a90810a3d1e6"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test accuracy for logistic regression: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8738532110091743"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Validation for Initial Logistic Regression Model"
      ],
      "metadata": {
        "id": "9Oi6XvVZTlzL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix_lr = metrics.confusion_matrix(y_test, lr_predictions_test, normalize = 'all')\n",
        "precision_lr = confusion_matrix_lr[1][1] / (confusion_matrix_lr[1][1] + confusion_matrix_lr[0][1])\n",
        "recall_lr = confusion_matrix_lr[1][1] / (confusion_matrix_lr[1][1] + confusion_matrix_lr[1][0])\n",
        "print('precision: ' + str(precision_lr))\n",
        "print('recall: ' + str(recall_lr))"
      ],
      "metadata": {
        "id": "ldw9nH5mTlTP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38447d35-0bfb-46e1-a259-76bbd9072c3c"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "precision: 0.8847926267281107\n",
            "recall: 0.8648648648648648\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lr_fpr, lr_tpr, lr_thresholds = metrics.roc_curve(y_test, lr_predictions_test)\n",
        "lr_fpr, lr_tpr, lr_thresholds"
      ],
      "metadata": {
        "id": "yzso7MlKTubP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fb055d8-c750-4527-fb90-3481c36fa616"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.        , 0.11682243, 1.        ]),\n",
              " array([0.        , 0.86486486, 1.        ]),\n",
              " array([2, 1, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('FPR')\n",
        "plt.ylabel('TPR')\n",
        "plt.title('ROC Curve for the Logistic Regression Model')\n",
        "plt.plot(lr_fpr, lr_tpr)"
      ],
      "metadata": {
        "id": "oMutLqC2TvS1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "7a849a81-18c2-424d-f770-56aae894efc6"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6dcfcece10>]"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Optimization"
      ],
      "metadata": {
        "id": "lTeS09ybTzeS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Random Search Optimization for Random Forest"
      ],
      "metadata": {
        "id": "IVHhUjJeT-y0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Number of trees in random forest\n",
        "n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
        "max_depth.append(None)\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2, 5, 10]\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [1, 2, 4]\n",
        "# Method of selecting samples for training each tree\n",
        "bootstrap = [True, False]\n",
        "# Create the random grid\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf,\n",
        "               'bootstrap': bootstrap,\n",
        "               'random_state': [42],\n",
        "               'n_jobs': [1]\n",
        "              }"
      ],
      "metadata": {
        "id": "LCr59wf5Twvc"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the random grid to search for best hyperparameters\n",
        "# First create the base model to tune\n",
        "rf = RandomForestClassifier()\n",
        "# Random search of parameters, using 3 fold cross validation, \n",
        "# search across 100 different combinations, and use all available cores\n",
        "rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 30, cv = 3, verbose=2, random_state=42, n_jobs = 1)\n",
        "# Fit the random search model\n",
        "rf_random.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "ZPFdUh8ST-Ao",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a10b7ae9-15f0-4491-e08c-055b356a10ec"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 30 candidates, totalling 90 fits\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=False, max_depth=90, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=90, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=90, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.6s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.5s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.5s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.3s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.3s\n",
            "[CV] END bootstrap=False, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.3s\n",
            "[CV] END bootstrap=False, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   1.0s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   1.0s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   1.0s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.9s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.7s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.9s\n",
            "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200, n_jobs=1, random_state=42; total time=   0.5s\n",
            "[CV] END bootstrap=True, max_depth=100, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.7s\n",
            "[CV] END bootstrap=True, max_depth=100, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.6s\n",
            "[CV] END bootstrap=True, max_depth=100, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.8s\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.7s\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.6s\n",
            "[CV] END bootstrap=True, max_depth=50, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.6s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   1.0s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   0.9s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=400, n_jobs=1, random_state=42; total time=   1.0s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800, n_jobs=1, random_state=42; total time=   2.0s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800, n_jobs=1, random_state=42; total time=   2.0s\n",
            "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800, n_jobs=1, random_state=42; total time=   2.0s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=70, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.9s\n",
            "[CV] END bootstrap=False, max_depth=70, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.8s\n",
            "[CV] END bootstrap=False, max_depth=70, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.8s\n",
            "[CV] END bootstrap=False, max_depth=110, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.9s\n",
            "[CV] END bootstrap=False, max_depth=110, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.6s\n",
            "[CV] END bootstrap=False, max_depth=110, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.7s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.5s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.3s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.3s\n",
            "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.3s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=True, max_depth=70, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1800, n_jobs=1, random_state=42; total time=   4.4s\n",
            "[CV] END bootstrap=False, max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1800, n_jobs=1, random_state=42; total time=   4.3s\n",
            "[CV] END bootstrap=False, max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1800, n_jobs=1, random_state=42; total time=   4.4s\n",
            "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.7s\n",
            "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.5s\n",
            "[CV] END bootstrap=True, max_depth=None, max_features=auto, min_samples_leaf=4, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.6s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.9s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.8s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.9s\n",
            "[CV] END bootstrap=True, max_depth=60, max_features=auto, min_samples_leaf=4, min_samples_split=5, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.7s\n",
            "[CV] END bootstrap=True, max_depth=60, max_features=auto, min_samples_leaf=4, min_samples_split=5, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.6s\n",
            "[CV] END bootstrap=True, max_depth=60, max_features=auto, min_samples_leaf=4, min_samples_split=5, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.7s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.3s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.3s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1400, n_jobs=1, random_state=42; total time=   3.3s\n",
            "[CV] END bootstrap=True, max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.9s\n",
            "[CV] END bootstrap=True, max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.7s\n",
            "[CV] END bootstrap=True, max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.7s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.5s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=40, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=1000, n_jobs=1, random_state=42; total time=   2.4s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   3.0s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.9s\n",
            "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1200, n_jobs=1, random_state=42; total time=   2.9s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.8s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.8s\n",
            "[CV] END bootstrap=True, max_depth=110, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=2000, n_jobs=1, random_state=42; total time=   4.7s\n",
            "[CV] END bootstrap=True, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.8s\n",
            "[CV] END bootstrap=True, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.8s\n",
            "[CV] END bootstrap=True, max_depth=80, max_features=auto, min_samples_leaf=1, min_samples_split=2, n_estimators=1600, n_jobs=1, random_state=42; total time=   3.8s\n",
            "[CV] END bootstrap=True, max_depth=90, max_features=auto, min_samples_leaf=4, min_samples_split=10, n_estimators=1800, n_jobs=1, random_state=42; total time=   4.1s\n",
            "[CV] END bootstrap=True, max_depth=90, max_features=auto, min_samples_leaf=4, min_samples_split=10, n_estimators=1800, n_jobs=1, random_state=42; total time=   3.9s\n",
            "[CV] END bootstrap=True, max_depth=90, max_features=auto, min_samples_leaf=4, min_samples_split=10, n_estimators=1800, n_jobs=1, random_state=42; total time=   4.1s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n",
            "[CV] END bootstrap=False, max_depth=60, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=600, n_jobs=1, random_state=42; total time=   1.4s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=30,\n",
              "                   n_jobs=1,\n",
              "                   param_distributions={'bootstrap': [True, False],\n",
              "                                        'max_depth': [10, 20, 30, 40, 50, 60,\n",
              "                                                      70, 80, 90, 100, 110,\n",
              "                                                      None],\n",
              "                                        'max_features': ['auto', 'sqrt'],\n",
              "                                        'min_samples_leaf': [1, 2, 4],\n",
              "                                        'min_samples_split': [2, 5, 10],\n",
              "                                        'n_estimators': [200, 400, 600, 800,\n",
              "                                                         1000, 1200, 1400, 1600,\n",
              "                                                         1800, 2000],\n",
              "                                        'n_jobs': [1], 'random_state': [42]},\n",
              "                   random_state=42, verbose=2)"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_best_params = rf_random.best_params_\n",
        "rf_best_params"
      ],
      "metadata": {
        "id": "XdFJs7k7UD4P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5a9df713-6eb0-4a27-8971-1274bd24a52d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'bootstrap': True,\n",
              " 'max_depth': 30,\n",
              " 'max_features': 'sqrt',\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 10,\n",
              " 'n_estimators': 1000,\n",
              " 'n_jobs': 1,\n",
              " 'random_state': 42}"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Random Forest Model Training with Tuned Hyperparameters"
      ],
      "metadata": {
        "id": "qNJFXQgyUEv2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "forest_model = RandomForestClassifier(n_estimators = rf_best_params['n_estimators'], \n",
        "                                      min_samples_split = rf_best_params['min_samples_split'], \n",
        "                                      min_samples_leaf = rf_best_params['min_samples_leaf'], \n",
        "                                      max_features = rf_best_params['max_features'], \n",
        "                                      max_depth = rf_best_params['max_depth'], \n",
        "                                      bootstrap = rf_best_params['bootstrap'],\n",
        "                                      random_state = 42,\n",
        "                                      n_jobs = 1\n",
        "                                     )\n",
        "\n",
        "\n",
        "fitted = forest_model.fit(X_train, y_train)\n",
        "rf_predictions_test = fitted.predict(X_test)\n",
        "rf_predictions_train = fitted.predict(X_train)"
      ],
      "metadata": {
        "id": "AUjEgK-WUF8n"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('training accuracy for random forest: ')\n",
        "np.mean(y_train == rf_predictions_train)"
      ],
      "metadata": {
        "id": "lJC_BssaUHc9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2446a1bf-3761-4637-c06e-0775431dde15"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training accuracy for random forest: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9480122324159022"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('test accuracy for random forest: ')\n",
        "np.mean(y_test == rf_predictions_test)"
      ],
      "metadata": {
        "id": "iYrz6HrmUJo5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0739dab3-0ef9-4683-da33-05ffa268291d"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test accuracy for random forest: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8899082568807339"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Validation for Tuned Random Forest Model"
      ],
      "metadata": {
        "id": "-ZyL78A2ULcr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix_rf = metrics.confusion_matrix(y_test, rf_predictions_test, normalize = 'all')\n",
        "precision_rf = confusion_matrix_rf[1][1] / (confusion_matrix_rf[1][1] + confusion_matrix_rf[0][1])\n",
        "recall_rf = confusion_matrix_rf[1][1] / (confusion_matrix_rf[1][1] + confusion_matrix_rf[1][0])\n",
        "print('precision: ' + str(precision_rf))\n",
        "print('recall: ' + str(recall_rf))"
      ],
      "metadata": {
        "id": "EOv0hLDmUMFD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcbe24e8-61b5-47c4-b057-4470a908765a"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "precision: 0.8782608695652173\n",
            "recall: 0.90990990990991\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_fpr, rf_tpr, rf_thresholds = metrics.roc_curve(y_test, rf_predictions_test)\n",
        "rf_fpr, rf_tpr, rf_thresholds"
      ],
      "metadata": {
        "id": "DJCfurZ2UN6_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "215e6e49-20bb-44c5-db6d-a5a5413e7bd5"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.        , 0.13084112, 1.        ]),\n",
              " array([0.        , 0.90990991, 1.        ]),\n",
              " array([2, 1, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('FPR')\n",
        "plt.ylabel('TPR')\n",
        "plt.title('ROC Curve for the Random Forest Model')\n",
        "plt.plot(rf_fpr, rf_tpr)"
      ],
      "metadata": {
        "id": "eL07Xfg1UPiL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "7bea400b-7c14-4c07-ff4e-2e7123402589"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6dcfbc5ad0>]"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEWCAYAAABrDZDcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3de5hddX3v8fcnc0kmyWQSkgC5J5RwidySk0O1F6TFC1KFntZ6oLXVHpTTC9qnelSsPojUHm21avsUa7FyUDyC2B7b2NJDrUJRjyBxhlDuxkD2JNwGmMk9mdv3/LHWkD07e2Z2kln7tj6v59nPrNus/V37sr5r/S77p4jAzMzya0atAzAzs9pyIjAzyzknAjOznHMiMDPLOScCM7OccyIwM8s5JwKrKUkdkr4paZekr2f0HNdJ+koW+86SpAsl7ah1HM3saD4bku6W9I6sY6oFJ4IqkvSUpAOS9kp6VtLNkuaWbPMzkr4jaU96cvympHUl28yT9FlJhXRfP0nnF03wvJL0bkkPSdonaYekr0s6O8vjrdCbgZOAhRHxa8e7s6xPnul7Npi+7i9J+pakM7J6vmqRFOlnY2/6GKjy8z8l6TWTrL8wjfEbJcvPTZffnXmQTcyJoPreFBFzgfOA9cAHx1ZIehXwr8A/AkuBNcAW4PuSTkm3aQe+DbwCuBiYB7wKeBE4f4Ln/AvgD4B3AycApwH/APzS0QYvqfVo/2cKq4AnImK4DmKp1J+l7+EyYCfwxRrFMd3OjYi56WP+0f5zFd6PPuBVkhYWLXsb8ETGz9v8IsKPKj2Ap4DXFM3/GfDPRfPfBT5X5v/+BfhyOv0O4DlgboXPuRYYAc6fZJu7gXcUzb8d+F7RfAC/D/wYeBL4a+BTJfv4R+A96fRS4O9JvrhPAu+e4Hk/CgwCQ8Be4EqSi5MPA9uB54EvA13p9qvTWK4ECsA9JfubAxwARtP97U1juQ64Pd3XHuBhYGPR/1UUb7rtzcDHiuYvAfYVzf8S0APsBnqB64rWjcX/tjT+F4APFa3vSPffDzwCvA/YUbT+zPS9GkiP4dKSuD6Xflb2At8HTgY+m+7vMWD9JMcVwKlllnelr1tf+p58GJhR9Dn5PvAZkguRjwEzgU+lx/cc8HmgI91+EfBPafwvkXzeZwC3pO/ZgTT295eJ40JgR7q/30+XtZAk4muBu4u2/RngfmBX+vdnitatAf49/Rx8C/gr4CtF618J/L80xi3AhRN9T5rpUfMA8vSgKBEAy4H/AP4inZ9NcsL+hTL/99vAM+n0bcCXjuI5fwfYPsU24z7glE8E3yK5m+gALiA5ySldvyD9Ei9Nv9g/Sr+c7cApwDbg9RM893UlX8T/BmxN/28u8H+AW9J1q9NYvkxy0u8os78LKTp5Fj3HQZKTdgvwceDedN3RxnszaSJIY7gF2FLy/Gen+z2H5GT4yyXxfyF9Hc8FDgFnpus/QXJyPAFYATw0dixAW/q6/FEa5y+SnMxOL4rrBeA/AbOA75Aktd9Kj/ljwF2TfAYmSgRfJknynWn8TwBXFn1OhoF3Aa3pMX0G2JQeQyfwTeDj6fYfJzmRt6WPn+fwZ+gpii6SJnpfSU7y96XLLgHuJLk4ujtddgJJ4vvNNKYr0vmF6fofAJ8mSVgXpK/hV9J1y0gS2iXp+/fadH5xue9JMz1qHkCeHumHfW/64QuSIp756brl6bIzyvzfxcBQOv0t4BNH8ZwfIj3pTbLNuA845RPBLxbNi+SK74J0/p3Ad9LpnwYKJfv/IPC/Jnju6xifCL4N/F7R/OkkdwytHD6RnjLJsVxI+UTwb0Xz64ADxxjvzSRJZYDkKvZJ4JxJ4vks8Jl0eiz+5UXrfwhcnk5vAy4uWncVhxPBzwPPkl6Np8tuJb3jSOP6QtG6dwGPFs2fDQxMEmeQ3MUMpI+/JEkgg8C6ou3+O4dPum8vfu3Sz8U+4KeKlr0KeDKdvp4kqZRLOE9RQSJIp3+cfi5uA36D8YngN4EflvzvD9JYV5IkrjlF677K4UTwAdKLjqL1dwJvK/c9aaaH6wiq75cjopPkg30Gye0yJFcto8CSMv+zhORqD5IrlHLbTORot59I79hEJN+K20iutgB+Hfjf6fQqYKmkgbEHyVXsSRU+z1KSIogx20mSQPH/93L0ni2a3g/MSsu0jyXeT0VShr6a5E7o9LEVkn5a0l2S+iTtIrkjK63EL41lrMHAUsYfW/HrsBTojYjRkvXLiuafK5o+UGZ+XMOEMjZExPz08e407jaOfD+Kn7M43sUkd7Y/Knot/2+6HOCTJHc1/yppm6RrpohnIrcAVwO/AHyjZF3p56c45qVAf0TsK1k3ZhXwayWfhZ9jer4/dc2JoEYi4t9JruI+lc7vI7lyKddy5i0kV8oA/wa8XtKcCp/q28BySRsn2WYfyRd4zMnlQi6ZvxV4s6RVJFfVf58u7yW5Apxf9OiMiEsqjPdpki/kmLGruOKTWmksk8U5lWOONyIKJJXwfyGpI138VZKikRUR0UVSFKIKY3mGpEhozMqi6aeBFZJmlKzfWeG+j8ULJHdjpe9H8XNGyfYHgFcUvZZdkVSsExF7IuK9EXEKcCnwHkkXldnPVG4Bfg+4IyL2l6wr/fwUx/wMsKDku1P8GveS3BEUfxbmRMQnjiK2huREUFufBV4r6dx0/hrgbWlTz05JCyR9jOT2+qPpNreQfGD/XtIZkmZIWijpjyQdcfKKiB+TVCLemjbBa5c0S9LlRVdkDwC/Imm2pFNJKmMnFRE9JF/8vwXujIix5oY/BPZI+kDaR6BF0lmS/nOFr8mtwB9KWpM2rf2fwNei8lZFzwELJXVVuP1xxRsR3yI5+VyVLuoEXoqIg5LOJ7lbqtTtwAfT9305SfHOmPtI7h7eL6lN0oXAm0juzDIRESNpTH+Sfh5XAe8Byra7T+9WvgB8RtKJAJKWSXp9Ov1GSadKEklF7gjJXTAk79spFcb1JPBqkmLPUncAp0n6dUmtkv4rSVHgP0XEdmAz8NH0e/BzJK/hmK8Ab5L0+vRzMCv9ziyvJK5G5kRQQxHRR1IZd206/z3g9cCvkFy9bCdpYvpz6QmdiDgEvIakFci3SMp1f0hyG3/fBE/1bpLWETeQlP/+BPgvJBV5kFTwDZJ8Gb/E4WKeqXw1jeWrRcc0AryRpHnskxxOFpWemG8iSXb3pP9/kPEnxElFxGMkyWRbenu/dIrtjzdeSIo83i9pJsmV6vWS9pC8r7cfxX4+SvKeP0nSjPiWojgHSU5ab0hj/BzwW+nxZuldJHeM24DvkbzXN02y/QdIin/ulbSb5A52rOhsbTq/l+Tu93MRcVe67uPAh9P37H9MFVREfC8ini6z/EWS9/O9JMWi7wfeGBFjRau/TnIH+xLwEZLv39j/9gKXkRQN9pFccL2PHJwnx2rszcwsp5o+05mZ2eScCMzMcs6JwMws55wIzMxyrlY/2nXMFi1aFKtXr651GGZmDeVHP/rRCxGxuNy6hksEq1evZvPmzbUOw8ysoUgq7XH9MhcNmZnlnBOBmVnOORGYmeWcE4GZWc45EZiZ5VxmiUDSTZKel/TQBOsl6S8lbZX0oKQNWcViZmYTy/KO4GaSkbUm8gaSXyNcS/ITvn+dYSxmZjaBzPoRRMQ9klZPssllJAOyB8lP1s6XtCQinskqJjOzenZwaITdB4bYVfQY2H94+qIzT+Sc5fOn/Xlr2aFsGeOHuduRLjsiEUi6inTgj5UrV5auNjOrG0Mjo+NO4LsnOKknj8Fx8weHRifd9+LOmU2XCCoWETcCNwJs3LjRAyiYWaaGR0bZfXC45Mp8cIqTevLYPzgy6b7ntLcwf3Y78zra6OpoZc2iOczvaKdrdhtdHW3p8jbmp3/HHvM62miZUemop0enlolgJ+PHZ11OtuOvmlmOjI4Ge9KT+UDJlffA/omv1HcfGGLPoclHRu1oazl8kp7dxooTZnNW8Ql8gpP6vI422lrqr7FmLRPBJuBqSbeRDB23y/UDZlYsIthzaJhdRcUsA2XK0Med1A8Msmt/cjKfbADG9tYZ4666l3TN4owlneOuwrs62pg/e/xVeVdHGzNbW6r3IlRBZolA0q3AhcAiSTtIxgdtA4iIz5MMMn0Jyfim+4HfzioWM6udiGD/4EjZK+/xV+rDRxS/7DowxOgkJ/O2Fr18gp7f0caiue381OI56ZV6+6Qn9VltzXUyPx5Zthq6Yor1Afx+Vs9vZtMnIjg4NHpEmfn4k3qZMvP0xD88ydm8ZYbGX3HPbmfVwjnjT+Kz28qe1DvaWpCyKTfPk4aoLDaz6XFoeGTcCXqiMvJyJ/XB4YlbtEgwb9b4q+6l8zvKVnqWntjnzmz1ybzGnAjMGsxY88TSq+6JTurFlaVTNU/snNU67oR92klzSyo9jyxu6ZrdRufMVmZk1KLFsudEYFYDI6NR/sp7/+ARV+Kl7dH3VdA88XAZeSurF82mq6OL+WmZeS2aJ1p9cyIwO0bFzRPLNVEsvVIvbuFyVM0TO5LmieUqPecVL6vj5olW35wILNcigr2Hho+46j7ySv3Ik/rug0NTNk8svvI+ed4sTj+p84iKzzw0T7T65kRgDa+4eWK5opTDV+rDRxTB7D44zMgkLVqKmyd2lTZPLNNE0c0TrRE5EVjdODg0ckS3/bEmiuM7DB1ZGTo0chTNEzvaWHnC7CNbs5S5UnfzRMsDJwKbVmPNE3eX+S2Wsj/CdQzNE8dO0mPNE8s2UXTzRLOKORHYEY5onjhFxWdxZenRNk9ce+Jc5s8urfRsP+Kk7uaJZtlxImhSY80Ty1V87i7pFVp6Uj+25oljV+rtR7RkGZvunNVKq1u0mNUdJ4I6Vto8sVwzxXJFMGM/uDWZ0uaJyxfMZv6yI8vI3TzRrPk5EdSJf3vkOb70g6fG9wo9xuaJ80par5Rrd+7miWY2xomgTtz43W088dwezlsxf1zzxHlpcUu5k7qbJ5rZdHAiqANDI6M8uGOAK85fyUfe9Ipah2NmOePC3jrw2DN7ODg0yoaVC2odipnlkBNBHejp7Qdg/crpH5TazGwqTgR1oHt7Pyd2zmTZ/I5ah2JmOeREUAe6CwNsWLnAvV/NrCacCGrshb2HKLy038VCZlYzTgQ11lMYAGDDKlcUm1ltOBHUWHehn9YZ4uxlXbUOxcxyyomgxnoK/axbOs+dw8ysZpwIamh4ZJQtvbvcf8DMasqJoIYee3YPB4ZGXFFsZjXlRFBDPYWkI5nvCMyslpwIaqinMMCiuTNZvsAdycysdpwIaqi70M+GlfPdkczMasqJoEZe3HuIp17c7/4DZlZzTgQ18kBv0pFs/QpXFJtZbTkR1MhYR7JzljsRmFltORHUSPf2Ac5cMo+OdnckM7PayjQRSLpY0uOStkq6psz6lZLuktQj6UFJl2QZT70YGQ227Bhw/wEzqwuZJQJJLcANwBuAdcAVktaVbPZh4PaIWA9cDnwuq3jqyePP7mH/4Ij7D5hZXcjyjuB8YGtEbIuIQeA24LKSbQKYl053AU9nGE/d6HZHMjOrI1kmgmVAb9H8jnRZseuAt0raAdwBvKvcjiRdJWmzpM19fX1ZxFpVPYUBFs5pZ8UJ7khmZrVX68riK4CbI2I5cAlwi6QjYoqIGyNiY0RsXLx4cdWDnG49hX7We0QyM6sTWSaCncCKovnl6bJiVwK3A0TED4BZwKIMY6q5/n2DbHthHxtWuaLYzOpDlongfmCtpDWS2kkqgzeVbFMALgKQdCZJImj8sp9JHO5I5voBM6sPmSWCiBgGrgbuBB4laR30sKTrJV2abvZe4J2StgC3Am+PiMgqpnrQXeinZYY4d4VHJDOz+tCa5c4j4g6SSuDiZdcWTT8C/GyWMdSb7kI/Z5zcyez2TF96M7OK1bqyOFdGRoMtvbvckczM6ooTQRX9+Pk97D007P4DZlZXnAiqqHt7UlHsRGBm9cSJoIp6Cv2cMKedVQtn1zoUM7OXORFUUXehn/UrPCKZmdUXJ4IqGdg/yE/69nlEMjOrO04EVeIRycysXjkRVEl3YYAZgnOdCMyszjgRVElPoZ/TT57HnJnuSGZm9cWJoApGR4MHCh6RzMzqkxNBFWzt28sedyQzszrlRFAF3dvHRiTzHYGZ1R8ngiroLvQzf3YbaxbNqXUoZmZHcCKogp7CgDuSmVndciLI2K4DQ/z4+b2uHzCzuuVEkLGxjmTuUWxm9cqJIGM9hX4kOGe5RyQzs/rkRJCx7sIAp5/USeestlqHYmZWlhNBhkZHg55CP+tdP2BmdcyJIEPbXtjLnoPD7lFsZnXNiSBDHpHMzBqBE0GGugv9dHW0cYo7kplZHXMiyFBPYYDzVsxnxgx3JDOz+uVEkJHdB4d44vk9LhYys7rnRJCRLb0DRMCGVa4oNrP65kSQkZ7CAPKIZGbWAJwIMtJd6GftiXOZ545kZlbnnAgykHQkG3D9gJk1BCeCDDz54j52HRhyRzIzawhOBBk4PCKZ7wjMrP5lmggkXSzpcUlbJV0zwTZvkfSIpIclfTXLeKqluzBA56xWfmrx3FqHYmY2pdasdiypBbgBeC2wA7hf0qaIeKRom7XAB4GfjYh+SSdmFU819RT63ZHMzBpGlncE5wNbI2JbRAwCtwGXlWzzTuCGiOgHiIjnM4ynKvYeGuaJ59yRzMwaR5aJYBnQWzS/I11W7DTgNEnfl3SvpIvL7UjSVZI2S9rc19eXUbjTY0vvAKPhEcnMrHHUurK4FVgLXAhcAXxB0hFNbSLixojYGBEbFy9eXOUQj05PIakoPm+5WwyZWWPIMhHsBFYUzS9PlxXbAWyKiKGIeBJ4giQxNKzuwgCnnjiXrtnuSGZmjSHLRHA/sFbSGkntwOXAppJt/oHkbgBJi0iKirZlGFOmIpIRyTa4/4CZNZDMEkFEDANXA3cCjwK3R8TDkq6XdGm62Z3Ai5IeAe4C3hcRL2YVU9aeenE//fuHPDSlmTWUzJqPAkTEHcAdJcuuLZoO4D3po+G5I5mZNaJaVxY3le5CP50zW1l7ojuSmVnjcCKYRt2FAc51RzIzazBOBNNk36FhHn92tyuKzazhOBFMky07ko5k692RzMwajBPBNOkpDACw3iOSmVmDcSKYJj2Ffk5ZPIf5s9trHYqZ2VE56kQgaYak38gimEYVEXR7RDIza1ATJgJJ8yR9UNJfSXqdEu8i6fn7luqFWP+2v7ifl/YNOhGYWUOarEPZLUA/8APgHcAfAQJ+OSIeqEJsDaOnN+lI5qEpzawRTZYITomIswEk/S3wDLAyIg5WJbIG0r19gLkzWzntpM5ah2JmdtQmqyMYGpuIiBFgh5NAed2Ffs5d0UWLO5KZWQOaLBGcK2m3pD2S9gDnFM3vrlaA9W7/4DCPPbuH9StcP2BmjWnCoqGIaKlmII3qwR27GBkNNqxy/YCZNaYJE4GkWcDvAKcCDwI3pT8tbUW60xHJfEdgZo1qsqKhLwEbgf8ALgH+vCoRNZiewgBrFs1hwRx3JDOzxjRZq6F1Ra2Gvgj8sDohNY6xEckuOK2+x1E2M5tMpa2GXCRURu9LB3hhrzuSmVljm+yO4Lyi1kECOtJ5kQwuNi/z6OqcO5KZWTOYLBFsiYj1VYukAXVv72d2ewunuyOZmTWwyYqGompRNKjuwgDnLp9Pa4t/xNXMGtdkdwQnSppwUPmI+HQG8TSMA4MjPPrMbq664JRah2JmdlwmSwQtwFySOgEr8R87dzE8Gq4oNrOGN1kieCYirq9aJA3m5Y5krig2swY3WeG27wQm0VPoZ9XC2SycO7PWoZiZHZfJEsFFVYuiwXhEMjNrJhMmgoh4qZqBNJId/Qfo23OIDS4WMrMm4HaPx6CndwCA9b4jMLMm4ERwDLq399PR1sIZJ7sjmZk1PieCY9BT6Oec5V3uSGZmTcFnsqN0cGiEh5/e7WIhM2saTgRH6aGXO5K5otjMmkOmiUDSxZIel7RV0jWTbPerkkLSxizjmQ6HO5L5jsDMmkNmiUBSC3AD8AZgHXCFpHVltusE/gC4L6tYplP39gFWnNDB4k53JDOz5pDlHcH5wNaI2BYRg8BtwGVltvtj4E+BgxnGMi2SjmT97khmZk0ly0SwDOgtmt+RLnuZpA3Aioj458l2JOkqSZslbe7r65v+SCv09K6DPL/nkBOBmTWVmlUWS5oBfBp471TbRsSNEbExIjYuXly78YG7tyf1A04EZtZMskwEO4EVRfPL02VjOoGzgLslPQW8EthUzxXGPYUBZrXN4Iwl7khmZs0jy0RwP7BW0hpJ7cDlwKaxlRGxKyIWRcTqiFgN3AtcGhGbM4zpuHQX+jln2Xza3JHMzJpIZme0iBgGrgbuBB4Fbo+IhyVdL+nSrJ43K0lHsl2sX+X+A2bWXCYbmOa4RcQdwB0ly66dYNsLs4zleD389G6GRoL1K1w/YGbNxWUcFepJO5Jt8B2BmTUZJ4IKdRf6Wb6ggxM7Z9U6FDOzaeVEUKGewoB/VsLMmpITQQWe2XWAZ3Yd9A/NmVlTciKoQPf2ZEQydyQzs2bkRFCBnkI/M1tncOaSebUOxcxs2jkRVKC70M/Zy7pob/XLZWbNx2e2KRwaHuGhnbvZsMrFQmbWnJwIpvDI07sZHBll/QpXFJtZc3IimEJ3Ia0o9h2BmTUpJ4IpdBf6WTa/g5PmuSOZmTUnJ4IpPFAY4Dz3HzCzJuZEMInndh9k58AB9x8ws6bmRDCJwyOS+Y7AzJqXE8EkenoHaG+Zwbql7khmZs3LiWAS3dv7OWvZPGa2ttQ6FDOzzDgRTGBweJQHd+5y/YCZNT0nggk88sxuBodH/dPTZtb0nAgm4BHJzCwvnAgm0F0YYEnXLJZ0ddQ6FDOzTDkRTKB7ez/r3WzUzHLAiaCM592RzMxyxImgjLEfmnNFsZnlgRNBGT2FftpbZnDWMnckM7Pm50RQRk9hgHVL3ZHMzPLBiaDE0MgoD+4ccP2AmeWGE0GJR5/ZzcGhUfcfMLPccCIo0eOKYjPLGSeCEt2Ffk6aN5OlXR6RzMzywYmgRHehnw0rFyCp1qGYmVVFpolA0sWSHpe0VdI1Zda/R9Ijkh6U9G1Jq7KMZyp9ew7R+9IB9yg2s1zJLBFIagFuAN4ArAOukLSuZLMeYGNEnAP8HfBnWcVTiZd/aM71A2aWI1neEZwPbI2IbRExCNwGXFa8QUTcFRH709l7geUZxjOl7sIAbS3irGVdtQzDzKyqskwEy4Deovkd6bKJXAn8S7kVkq6StFnS5r6+vmkMcbyeQj/rlsxjVps7kplZftRFZbGktwIbgU+WWx8RN0bExojYuHjx4kxiGB4Z5cEdu9xs1MxypzXDfe8EVhTNL0+XjSPpNcCHgFdHxKEM45nUY8/u4cDQCBtWORGYWb5keUdwP7BW0hpJ7cDlwKbiDSStB/4GuDQins8wlimNVRSvX+EWQ2aWL5klgogYBq4G7gQeBW6PiIclXS/p0nSzTwJzga9LekDSpgl2l7nuwgCLO2eyfIFHJDOzfMmyaIiIuAO4o2TZtUXTr8ny+Y9G0pFsvjuSmVnu1EVlca29uPcQ21/c74piM8slJwIO/9CcO5KZWR45EZAUC7XOEGe7I5mZ5ZATAckdwZlL5tHR7o5kZpY/uU8EwyOjbNkxwAb/0JyZ5VTuE8Hjz+1h/6A7kplZfuU+EXSPjUi2wonAzPIp94mgp9DPorntrDjBHcnMLJ+cCAoDrPeIZGaWY7lOBC/tG+TJF/Z5RDIzy7VcJ4IHej0imZlZrhNB9/YBWmaIc5a7I5mZ5Ve+E0GhnzOXdDK7PdPf3jMzq2u5TQQjo8GW3gE3GzWz3MttInjiuT3sGxxhwypXFJtZvuU2EXQXXFFsZgY5TgQ9hQFOmNPOyhNm1zoUM7Oaym0i8IhkZmaJXCaCgf2DbOvb5xHJzMzIaSLo6U1/aM49is3McpoItvczQ3DucicCM7NcJoLuwgBnnDyPOTPdkczMLHeJYGQ0eKB3wMVCZmap3CWCrc/vZe+hYfcfMDNL5S4RvNyRzENTmpkBOUwEPYV+FsxuY/VCdyQzM4McJoJuj0hmZjZOrhLBrv1DbH1+LxtcUWxm9rJcJYIHdox1JHP9gJnZmFwlgu6xjmQrfEdgZjYmX4mg0M9pJ3Uy1x3JzMxelmkikHSxpMclbZV0TZn1MyV9LV1/n6TVWcUy+nJHMhcLmZkVyywRSGoBbgDeAKwDrpC0rmSzK4H+iDgV+Azwp1nF85O+vew5OOyKYjOzElneEZwPbI2IbRExCNwGXFayzWXAl9LpvwMuUkbtOt2RzMysvCwTwTKgt2h+R7qs7DYRMQzsAhaW7kjSVZI2S9rc19d3TMEsmN3Oa9edxJqFc47p/83MmlVD1JpGxI3AjQAbN26MY9nH615xMq97xcnTGpeZWTPI8o5gJ7CiaH55uqzsNpJagS7gxQxjMjOzElkmgvuBtZLWSGoHLgc2lWyzCXhbOv1m4DsRcUxX/GZmdmwyKxqKiGFJVwN3Ai3ATRHxsKTrgc0RsQn4InCLpK3ASyTJwszMqijTOoKIuAO4o2TZtUXTB4FfyzIGMzObXK56FpuZ2ZGcCMzMcs6JwMws55wIzMxyTo3WWlNSH7D9GP99EfDCNIbTCHzM+eBjzofjOeZVEbG43IqGSwTHQ9LmiNhY6ziqycecDz7mfMjqmF00ZGaWc04EZmY5l7dEcGOtA6gBH3M++JjzIZNjzlUdgZmZHSlvdwRmZlbCicDMLOeaMhFIuljS45K2SrqmzPqZkr6Wrr9P0urqRzm9Kjjm90h6RNKDkr4taVUt4pxOUx1z0Xa/KikkNXxTw0qOWdJb0vf6YUlfrXaM062Cz/ZKSXdJ6kk/35fUIs7pIukmSc9LemiC9ZL0l+nr8aCkDcf9pBHRVA+Sn7z+CXAK0A5sAdaVbPN7wOfT6cuBr9U67ioc8y8As9Pp383DMafbdQL3APcCG2sddxXe57VAD7AgnT+x1nFX4ZhvBH43nV4HPFXruI/zmC8ANgAPTbD+EuBfAAGvBO473udsxjuC84GtEbEtIjVJI9sAAAOOSURBVAaB24DLSra5DPhSOv13wEWSVMUYp9uUxxwRd0XE/nT2XpIR4xpZJe8zwB8DfwocrGZwGankmN8J3BAR/QAR8XyVY5xulRxzAPPS6S7g6SrGN+0i4h6S8Vkmchnw5UjcC8yXtOR4nrMZE8EyoLdofke6rOw2ETEM7AIWViW6bFRyzMWuJLmiaGRTHnN6y7wiIv65moFlqJL3+TTgNEnfl3SvpIurFl02Kjnm64C3StpBMv7Ju6oTWs0c7fd9Sg0xeL1NH0lvBTYCr651LFmSNAP4NPD2GodSba0kxUMXktz13SPp7IgYqGlU2boCuDki/lzSq0hGPTwrIkZrHVijaMY7gp3AiqL55emysttIaiW5nXyxKtFlo5JjRtJrgA8Bl0bEoSrFlpWpjrkTOAu4W9JTJGWpmxq8wriS93kHsCkihiLiSeAJksTQqCo55iuB2wEi4gfALJIfZ2tWFX3fj0YzJoL7gbWS1khqJ6kM3lSyzSbgben0m4HvRFoL06CmPGZJ64G/IUkCjV5uDFMcc0TsiohFEbE6IlaT1ItcGhGbaxPutKjks/0PJHcDSFpEUlS0rZpBTrNKjrkAXAQg6UySRNBX1SiraxPwW2nroVcCuyLimePZYdMVDUXEsKSrgTtJWhzcFBEPS7oe2BwRm4Avktw+biWplLm8dhEfvwqP+ZPAXODrab14ISIurVnQx6nCY24qFR7zncDrJD0CjADvi4iGvdut8JjfC3xB0h+SVBy/vZEv7CTdSpLMF6X1Hh8B2gAi4vMk9SCXAFuB/cBvH/dzNvDrZWZm06AZi4bMzOwoOBGYmeWcE4GZWc45EZiZ5ZwTgZlZzjkRmFVI0oikB4oeqyVdKGlXOv+opI+k2xYvf0zSp2odv9lEmq4fgVmGDkTEecUL0p8w/25EvFHSHOABSd9MV48t7wB6JH0jIr5f3ZDNpuY7ArNpEhH7gB8Bp5YsPwA8wHH+MJhZVpwIzCrXUVQs9I3SlZIWkvym0cMlyxeQ/N7PPdUJ0+zouGjIrHJHFA2lfl5SDzAKfCL9CYQL0+VbSJLAZyPi2SrGalYxJwKz4/fdiHjjRMslrQHulXR7RDxQ7eDMpuKiIbOMpT8H/QngA7WOxawcJwKz6vg8cEHaysisrvjXR83Mcs53BGZmOedEYGaWc04EZmY550RgZpZzTgRmZjnnRGBmlnNOBGZmOff/AZIwx95epi16AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confidence Interval Visualization for Tuned Random Forest"
      ],
      "metadata": {
        "id": "0pW7N6SIUW7q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mean_confidence_interval(data, confidence=0.95):\n",
        "    a = 1.0 * np.array(data)\n",
        "    n = len(a)\n",
        "    m, se = np.mean(a), scipy.stats.sem(a)\n",
        "    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)\n",
        "    return m, m-h, m+h"
      ],
      "metadata": {
        "id": "0DcfL0KQUXUa"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_accuracy = []\n",
        "test_accuracy = []\n",
        "for i in np.arange(100):\n",
        "    #print(i)\n",
        "    rf_model = RandomForestClassifier(n_estimators = rf_best_params['n_estimators'], \n",
        "                                      min_samples_split = rf_best_params['min_samples_split'], \n",
        "                                      min_samples_leaf = rf_best_params['min_samples_leaf'], \n",
        "                                      max_features = rf_best_params['max_features'], \n",
        "                                      max_depth = rf_best_params['max_depth'], \n",
        "                                      bootstrap = rf_best_params['bootstrap'],\n",
        "                                      random_state = 42,\n",
        "                                      n_jobs = 1\n",
        "                                     )\n",
        "    \n",
        "    sample = pitching.sample(int(0.8 * len(pitching)))\n",
        "    s_train, s_test = train_test_split(sample)\n",
        "\n",
        "    s_X = s_train.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star'])\n",
        "    s_y = s_train['is_all_star']\n",
        "    b_fitted = rf_model.fit(s_X, s_y)\n",
        "    rf_predictions_test = b_fitted.predict(s_test.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star']))\n",
        "    rf_predictions_train = fitted.predict(s_X)\n",
        "    train_accuracy = np.append(train_accuracy, np.mean(s_train['is_all_star'].values == rf_predictions_train))\n",
        "    test_accuracy = np.append(test_accuracy, np.mean(s_test['is_all_star'].values == rf_predictions_test))\n",
        "\n",
        "mean_confidence_interval_train = mean_confidence_interval(train_accuracy)\n",
        "mean_confidence_interval_test = mean_confidence_interval(test_accuracy)"
      ],
      "metadata": {
        "id": "_ig2gGOjUZCg"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "figure(figsize=(12, 4), dpi=80)\n",
        "plt.xlabel('Train accuracy')\n",
        "plt.ylabel('frequency')\n",
        "plt.title('Training Accuracy of Random Forest Model for Predicting All-Star status from 100 samples')\n",
        "plt.hist(train_accuracy)"
      ],
      "metadata": {
        "id": "U6W4EMO1Ubnw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "01cfc556-0e96-4545-fdb5-168ac671d608"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 1.,  3.,  4., 10., 17., 18., 24., 10.,  8.,  5.]),\n",
              " array([0.91969407, 0.92208413, 0.92447419, 0.92686424, 0.9292543 ,\n",
              "        0.93164436, 0.93403442, 0.93642447, 0.93881453, 0.94120459,\n",
              "        0.94359465]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 960x320 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figure(figsize=(12, 4), dpi=80)\n",
        "plt.xlabel('Test accuracy')\n",
        "plt.ylabel('frequency')\n",
        "plt.title('Testing Accuracy of Random Forest Model for Predicting All-Star status from 100 samples')\n",
        "plt.hist(test_accuracy)"
      ],
      "metadata": {
        "id": "m6ygbf12UdnJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "aee69ef2-6b5d-4304-ea5e-76c4fb7457b2"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 3.,  5., 14., 17., 22., 15., 15.,  7.,  1.,  1.]),\n",
              " array([0.82234957, 0.83180516, 0.84126074, 0.85071633, 0.86017192,\n",
              "        0.86962751, 0.87908309, 0.88853868, 0.89799427, 0.90744986,\n",
              "        0.91690544]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 960x320 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Random Search Optimization for Tuned Logistic Regression"
      ],
      "metadata": {
        "id": "MVJTSnOKUgpc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "solvers = ['newton-cg', 'lbfgs', 'liblinear']\n",
        "penalty = ['l2']\n",
        "c_values = [100, 10, 1.0, 0.1, 0.01]\n",
        "\n",
        "random_grid = {'solver': solvers,\n",
        "               'penalty': penalty,\n",
        "               'C': c_values,\n",
        "               'max_iter': [2000],\n",
        "               'random_state': [42],\n",
        "               'n_jobs': [1]\n",
        "               }"
      ],
      "metadata": {
        "id": "8rJsxIkfUhE2"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the random grid to search for best hyperparameters\n",
        "# First create the base model to tune\n",
        "lr = LogisticRegression()\n",
        "# Random search of parameters, using 3 fold cross validation, \n",
        "# search across 100 different combinations, and use all available cores\n",
        "lr_random = RandomizedSearchCV(estimator = lr, param_distributions = random_grid, n_iter = 30, cv = 3, verbose=2, random_state=42, n_jobs = 1)\n",
        "# Fit the random search model\n",
        "lr_random.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "n-CsCOzGUjlc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ff4953e-9510-42ca-dd52-21bc2a070977"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py:296: UserWarning: The total space of parameters 15 is smaller than n_iter=30. Running 15 iterations. For exhaustive searches, use GridSearchCV.\n",
            "  UserWarning,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 15 candidates, totalling 45 fits\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.3s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.3s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1.0, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=lbfgs; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=2000, n_jobs=1, penalty=l2, random_state=42, solver=liblinear; total time=   0.0s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=3, estimator=LogisticRegression(), n_iter=30, n_jobs=1,\n",
              "                   param_distributions={'C': [100, 10, 1.0, 0.1, 0.01],\n",
              "                                        'max_iter': [2000], 'n_jobs': [1],\n",
              "                                        'penalty': ['l2'], 'random_state': [42],\n",
              "                                        'solver': ['newton-cg', 'lbfgs',\n",
              "                                                   'liblinear']},\n",
              "                   random_state=42, verbose=2)"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lr_best_params = lr_random.best_params_\n",
        "lr_best_params"
      ],
      "metadata": {
        "id": "QqX9xSDtUlA6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3da0671c-2b62-4f66-cc71-382f97a6745c"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 0.01,\n",
              " 'max_iter': 2000,\n",
              " 'n_jobs': 1,\n",
              " 'penalty': 'l2',\n",
              " 'random_state': 42,\n",
              " 'solver': 'liblinear'}"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Logistic Regression Model Training with Tuned Hyperparameters\n"
      ],
      "metadata": {
        "id": "pb2F1R_bUoUe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr_model = LogisticRegression(solver = lr_best_params['solver'], \n",
        "                              penalty = lr_best_params['penalty'], \n",
        "                              max_iter = lr_best_params['max_iter'], \n",
        "                              C = lr_best_params['C'],\n",
        "                              random_state = 42,\n",
        "                              n_jobs = 1\n",
        "                             )\n",
        "\n",
        "fitted = lr_model.fit(X_train, y_train)\n",
        "lr_predictions_test = fitted.predict(X_test)\n",
        "lr_predictions_train = fitted.predict(X_train)"
      ],
      "metadata": {
        "id": "XMyqIuDHUots"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('training accuracy for logistic regression: ')\n",
        "np.mean(y_train == lr_predictions_train)"
      ],
      "metadata": {
        "id": "tJNWtEFRUqSk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ba709c8-fde9-43c6-d9f4-f92d153eb272"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training accuracy for logistic regression: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8509174311926605"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('test accuracy for logistic regression: ')\n",
        "np.mean(y_test == lr_predictions_test)"
      ],
      "metadata": {
        "id": "wiJD7f1gUrpI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ca9cecf-1f64-471d-cb8b-8ba984121be3"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test accuracy for logistic regression: \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8738532110091743"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Validation for Tuned Logistic Regression Model"
      ],
      "metadata": {
        "id": "hjIBulnnUvw7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix_lr = metrics.confusion_matrix(y_test, lr_predictions_test, normalize = 'all')\n",
        "precision_lr = confusion_matrix_lr[1][1] / (confusion_matrix_lr[1][1] + confusion_matrix_lr[0][1])\n",
        "recall_lr = confusion_matrix_lr[1][1] / (confusion_matrix_lr[1][1] + confusion_matrix_lr[1][0])\n",
        "print('precision: ' + str(precision_lr))\n",
        "print('recall: ' + str(recall_lr))"
      ],
      "metadata": {
        "id": "hfQjpO5bUuH9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcc2a9cc-0992-4f5a-9fd4-dfb53842c406"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "precision: 0.874439461883408\n",
            "recall: 0.8783783783783784\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lr_fpr, lr_tpr, lr_thresholds = metrics.roc_curve(y_test, lr_predictions_test)\n",
        "lr_fpr, lr_tpr, lr_thresholds"
      ],
      "metadata": {
        "id": "_b93mxFkUux6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8a95cdf-1ed2-46a3-9a9a-14e5a44e0f50"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.        , 0.13084112, 1.        ]),\n",
              " array([0.        , 0.87837838, 1.        ]),\n",
              " array([2, 1, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('FPR')\n",
        "plt.ylabel('TPR')\n",
        "plt.title('ROC Curve for the Logistic Regression Model')\n",
        "plt.plot(lr_fpr, lr_tpr)"
      ],
      "metadata": {
        "id": "bJMXO5qgUzex",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "8897e2b9-b1b1-45a9-ce70-980c65192194"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6dcf8ded90>]"
            ]
          },
          "metadata": {},
          "execution_count": 73
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confidence Interval Visualization for Tuned Logistic Regression"
      ],
      "metadata": {
        "id": "HjBAg4PJU2V3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_accuracy = []\n",
        "test_accuracy = []\n",
        "for i in np.arange(100):\n",
        "    #print(i)\n",
        "    lr_model = LogisticRegression(solver = lr_best_params['solver'], \n",
        "                                  penalty = lr_best_params['penalty'], \n",
        "                                  max_iter = lr_best_params['max_iter'], \n",
        "                                  C = lr_best_params['C'],\n",
        "                                  random_state = 42,\n",
        "                                  n_jobs = 1\n",
        "                                 )\n",
        "    \n",
        "    sample = pitching.sample(int(0.8 * len(pitching)))\n",
        "    s_train, s_test = train_test_split(sample)\n",
        "\n",
        "    s_X = s_train.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star'])\n",
        "    s_y = s_train['is_all_star']\n",
        "    b_fitted = rf_model.fit(s_X, s_y)\n",
        "    lr_predictions_test = b_fitted.predict(s_test.drop(columns = ['playerID', 'yearID', 'teamID', 'is_all_star']))\n",
        "    lr_predictions_train = fitted.predict(s_X)\n",
        "    train_accuracy = np.append(train_accuracy, np.mean(s_train['is_all_star'].values == lr_predictions_train))\n",
        "    test_accuracy = np.append(test_accuracy, np.mean(s_test['is_all_star'].values == lr_predictions_test))\n",
        "\n",
        "mean_confidence_interval_train = mean_confidence_interval(train_accuracy)\n",
        "mean_confidence_interval_test = mean_confidence_interval(test_accuracy)"
      ],
      "metadata": {
        "id": "hPds6gUXU4Xg"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "figure(figsize=(12, 4), dpi=80)\n",
        "plt.xlabel('Train accuracy')\n",
        "plt.ylabel('frequency')\n",
        "plt.title('Logisitic Regression Training Accuracy for Predicting All-Star status from 100 samples')\n",
        "plt.hist(train_accuracy)"
      ],
      "metadata": {
        "id": "q2eJHhpuU5tV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "f5bf6bb2-d44f-4ccb-815c-7ed7408296a7"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 5.,  1.,  3., 19., 13., 23., 18., 10.,  5.,  3.]),\n",
              " array([0.84130019, 0.84445507, 0.84760994, 0.85076482, 0.85391969,\n",
              "        0.85707457, 0.86022945, 0.86338432, 0.8665392 , 0.86969407,\n",
              "        0.87284895]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 960x320 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figure(figsize=(12, 4), dpi=80)\n",
        "plt.xlabel('Test accuracy')\n",
        "plt.ylabel('frequency')\n",
        "plt.title('Logisitic Regression Testing Accuracy for Predicting All-Star status from 100 samples')\n",
        "plt.hist(test_accuracy)"
      ],
      "metadata": {
        "id": "9fRR2rwPU7-P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "873b3804-9ca6-4a68-9ea8-0f3e95f9e327"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 5.,  5., 13., 10., 16., 22., 16., 10.,  2.,  1.]),\n",
              " array([0.82234957, 0.83151862, 0.84068768, 0.84985673, 0.85902579,\n",
              "        0.86819484, 0.8773639 , 0.88653295, 0.89570201, 0.90487106,\n",
              "        0.91404011]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 960x320 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Uncertainty Interval for Logistic Regression (GLM) Testing Accuracy"
      ],
      "metadata": {
        "id": "tM5YzygaU-Va"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "logistic_regression_sample_accuracies = dict()\n",
        "logistic_regression_sample_accuracies['min_test_acc'] = min(test_accuracy)\n",
        "logistic_regression_sample_accuracies['avg_test_acc'] = np.mean(test_accuracy)\n",
        "logistic_regression_sample_accuracies['max_test_acc'] = max(test_accuracy)"
      ],
      "metadata": {
        "id": "-gd2-bLPU8GP"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logistic_regression_sample_accuracies"
      ],
      "metadata": {
        "id": "tqdZUsMUVBF-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc3e8601-9dae-4bc1-fb8e-ed42223a4a52"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'avg_test_acc': 0.8662177650429801,\n",
              " 'max_test_acc': 0.9140401146131805,\n",
              " 'min_test_acc': 0.8223495702005731}"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "percentile_95 = np.mean(test_accuracy) + 2 * test_accuracy.std()\n",
        "percentile_95"
      ],
      "metadata": {
        "id": "lrVMYiZfVC7s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "503e805a-667c-489b-f133-531a209178d6"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9042193806724935"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "percentile_05 = np.mean(test_accuracy) - 2 * test_accuracy.std()\n",
        "percentile_05"
      ],
      "metadata": {
        "id": "z1rx7UGhVDmg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76b7300a-c09a-4ac9-87e5-98d2a9dce61d"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8282161494134667"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Research Question 2: Causal Effect of Elevation on Homeruns"
      ],
      "metadata": {
        "id": "XSMD4_CLkcZL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Importing the Data"
      ],
      "metadata": {
        "id": "otE8cDkvkaXk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_2021 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2021.csv')\n",
        "df_2020 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2020.csv')\n",
        "df_2019 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2019.csv')\n",
        "df_2018 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2018.csv')\n",
        "df_2017 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2017.csv')\n",
        "all_pitches = pd.concat([df_2021, df_2020, df_2019, df_2018, df_2017])\n",
        "all_pitches.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "vYXhvzM--COr",
        "outputId": "78cf7c9a-1f1a-48c8-c80f-6169bc690995"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pitch_type</th>\n",
              "      <th>game_date</th>\n",
              "      <th>release_speed</th>\n",
              "      <th>release_pos_x</th>\n",
              "      <th>release_pos_z</th>\n",
              "      <th>player_name</th>\n",
              "      <th>batter</th>\n",
              "      <th>pitcher</th>\n",
              "      <th>events</th>\n",
              "      <th>description</th>\n",
              "      <th>spin_dir</th>\n",
              "      <th>spin_rate_deprecated</th>\n",
              "      <th>break_angle_deprecated</th>\n",
              "      <th>break_length_deprecated</th>\n",
              "      <th>zone</th>\n",
              "      <th>des</th>\n",
              "      <th>game_type</th>\n",
              "      <th>stand</th>\n",
              "      <th>p_throws</th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>type</th>\n",
              "      <th>hit_location</th>\n",
              "      <th>bb_type</th>\n",
              "      <th>balls</th>\n",
              "      <th>strikes</th>\n",
              "      <th>game_year</th>\n",
              "      <th>pfx_x</th>\n",
              "      <th>pfx_z</th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>on_3b</th>\n",
              "      <th>on_2b</th>\n",
              "      <th>on_1b</th>\n",
              "      <th>outs_when_up</th>\n",
              "      <th>inning</th>\n",
              "      <th>inning_topbot</th>\n",
              "      <th>hc_x</th>\n",
              "      <th>hc_y</th>\n",
              "      <th>tfs_deprecated</th>\n",
              "      <th>...</th>\n",
              "      <th>hit_distance_sc</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "      <th>release_spin_rate</th>\n",
              "      <th>release_extension</th>\n",
              "      <th>game_pk</th>\n",
              "      <th>pitcher.1</th>\n",
              "      <th>fielder_2.1</th>\n",
              "      <th>fielder_3</th>\n",
              "      <th>fielder_4</th>\n",
              "      <th>fielder_5</th>\n",
              "      <th>fielder_6</th>\n",
              "      <th>fielder_7</th>\n",
              "      <th>fielder_8</th>\n",
              "      <th>fielder_9</th>\n",
              "      <th>release_pos_y</th>\n",
              "      <th>estimated_ba_using_speedangle</th>\n",
              "      <th>estimated_woba_using_speedangle</th>\n",
              "      <th>woba_value</th>\n",
              "      <th>woba_denom</th>\n",
              "      <th>babip_value</th>\n",
              "      <th>iso_value</th>\n",
              "      <th>launch_speed_angle</th>\n",
              "      <th>at_bat_number</th>\n",
              "      <th>pitch_number</th>\n",
              "      <th>pitch_name</th>\n",
              "      <th>home_score</th>\n",
              "      <th>away_score</th>\n",
              "      <th>bat_score</th>\n",
              "      <th>fld_score</th>\n",
              "      <th>post_away_score</th>\n",
              "      <th>post_home_score</th>\n",
              "      <th>post_bat_score</th>\n",
              "      <th>post_fld_score</th>\n",
              "      <th>if_fielding_alignment</th>\n",
              "      <th>of_fielding_alignment</th>\n",
              "      <th>spin_axis</th>\n",
              "      <th>delta_home_win_exp</th>\n",
              "      <th>delta_run_exp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SL</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>81.4</td>\n",
              "      <td>-2.95</td>\n",
              "      <td>6.07</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>657077</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Alex Verdugo singles on a ground ball to right...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2021</td>\n",
              "      <td>0.25</td>\n",
              "      <td>-0.55</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>578428.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>178.66</td>\n",
              "      <td>107.68</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>53.0</td>\n",
              "      <td>79.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.5</td>\n",
              "      <td>2130.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.27</td>\n",
              "      <td>0.231</td>\n",
              "      <td>0.216</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>50</td>\n",
              "      <td>6</td>\n",
              "      <td>Slider</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>48.0</td>\n",
              "      <td>-0.030</td>\n",
              "      <td>0.397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.7</td>\n",
              "      <td>3.74</td>\n",
              "      <td>5.23</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>665833</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Oneil Cruz grounds out sharply, first baseman ...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>3.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>159.46</td>\n",
              "      <td>154.57</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>30.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>2255.0</td>\n",
              "      <td>6.4</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.13</td>\n",
              "      <td>0.397</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>56</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Infield shift</td>\n",
              "      <td>Standard</td>\n",
              "      <td>115.0</td>\n",
              "      <td>-0.003</td>\n",
              "      <td>-0.103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>93.6</td>\n",
              "      <td>-2.71</td>\n",
              "      <td>6.18</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>578428</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Jose Iglesias singles on a ground ball to cent...</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.81</td>\n",
              "      <td>1.50</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>103.06</td>\n",
              "      <td>87.86</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>42.0</td>\n",
              "      <td>94.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93.5</td>\n",
              "      <td>2241.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.28</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>211.0</td>\n",
              "      <td>-0.017</td>\n",
              "      <td>0.148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CH</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>85.3</td>\n",
              "      <td>-1.75</td>\n",
              "      <td>4.95</td>\n",
              "      <td>Webb, Logan</td>\n",
              "      <td>605170</td>\n",
              "      <td>657277</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Victor Caratini singles on a ground ball to ri...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>SF</td>\n",
              "      <td>SD</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.71</td>\n",
              "      <td>-0.53</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>545350.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>593590.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>Top</td>\n",
              "      <td>176.63</td>\n",
              "      <td>129.03</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>28.0</td>\n",
              "      <td>107.2</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>86.2</td>\n",
              "      <td>1363.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>632241</td>\n",
              "      <td>657277</td>\n",
              "      <td>457763.0</td>\n",
              "      <td>527038.0</td>\n",
              "      <td>600303.0</td>\n",
              "      <td>446334.0</td>\n",
              "      <td>543063.0</td>\n",
              "      <td>592178.0</td>\n",
              "      <td>573262.0</td>\n",
              "      <td>664774.0</td>\n",
              "      <td>53.87</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.402</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>64</td>\n",
              "      <td>2</td>\n",
              "      <td>Changeup</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>277.0</td>\n",
              "      <td>-0.002</td>\n",
              "      <td>0.910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.8</td>\n",
              "      <td>3.60</td>\n",
              "      <td>5.34</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>592325</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Ben Gamel flies out to center fielder TJ Friedl.</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>fly_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.19</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>81.15</td>\n",
              "      <td>69.31</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>340.0</td>\n",
              "      <td>92.4</td>\n",
              "      <td>28.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>2205.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.15</td>\n",
              "      <td>0.100</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>55</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Strategic</td>\n",
              "      <td>Standard</td>\n",
              "      <td>113.0</td>\n",
              "      <td>-0.007</td>\n",
              "      <td>-0.163</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 92 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "  pitch_type   game_date  ...  delta_home_win_exp  delta_run_exp\n",
              "0         SL  2021-10-03  ...              -0.030          0.397\n",
              "1         FF  2021-10-03  ...              -0.003         -0.103\n",
              "2         FF  2021-10-03  ...              -0.017          0.148\n",
              "3         CH  2021-10-03  ...              -0.002          0.910\n",
              "4         FF  2021-10-03  ...              -0.007         -0.163\n",
              "\n",
              "[5 rows x 92 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###EDA"
      ],
      "metadata": {
        "id": "ZLhcgmsJhqoY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['description'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DG5FEhYD94cX",
        "outputId": "4158b33f-6597-4f21-ccf3-2e3396bf0164"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "hit_into_play    200000\n",
              "Name: description, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['events'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BiY7ictb-x4m",
        "outputId": "cdb80426-421f-4028-fbff-4ab77337fe15"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "field_out                    115819\n",
              "single                        41625\n",
              "double                        13060\n",
              "home_run                      10023\n",
              "force_out                      5695\n",
              "grounded_into_double_play      5605\n",
              "field_error                    2039\n",
              "sac_fly                        1836\n",
              "triple                         1264\n",
              "sac_bunt                       1164\n",
              "double_play                     682\n",
              "fielders_choice                 620\n",
              "fielders_choice_out             519\n",
              "sac_fly_double_play              26\n",
              "catcher_interf                   15\n",
              "triple_play                       6\n",
              "sac_bunt_double_play              2\n",
              "Name: events, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches.columns"
      ],
      "metadata": {
        "id": "VkCsaP78_HMc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b4e2f35-0ed2-4866-c63f-a309d1e68725"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['pitch_type', 'game_date', 'release_speed', 'release_pos_x',\n",
              "       'release_pos_z', 'player_name', 'batter', 'pitcher', 'events',\n",
              "       'description', 'spin_dir', 'spin_rate_deprecated',\n",
              "       'break_angle_deprecated', 'break_length_deprecated', 'zone', 'des',\n",
              "       'game_type', 'stand', 'p_throws', 'home_team', 'away_team', 'type',\n",
              "       'hit_location', 'bb_type', 'balls', 'strikes', 'game_year', 'pfx_x',\n",
              "       'pfx_z', 'plate_x', 'plate_z', 'on_3b', 'on_2b', 'on_1b',\n",
              "       'outs_when_up', 'inning', 'inning_topbot', 'hc_x', 'hc_y',\n",
              "       'tfs_deprecated', 'tfs_zulu_deprecated', 'fielder_2', 'umpire', 'sv_id',\n",
              "       'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az', 'sz_top', 'sz_bot',\n",
              "       'hit_distance_sc', 'launch_speed', 'launch_angle', 'effective_speed',\n",
              "       'release_spin_rate', 'release_extension', 'game_pk', 'pitcher.1',\n",
              "       'fielder_2.1', 'fielder_3', 'fielder_4', 'fielder_5', 'fielder_6',\n",
              "       'fielder_7', 'fielder_8', 'fielder_9', 'release_pos_y',\n",
              "       'estimated_ba_using_speedangle', 'estimated_woba_using_speedangle',\n",
              "       'woba_value', 'woba_denom', 'babip_value', 'iso_value',\n",
              "       'launch_speed_angle', 'at_bat_number', 'pitch_number', 'pitch_name',\n",
              "       'home_score', 'away_score', 'bat_score', 'fld_score', 'post_away_score',\n",
              "       'post_home_score', 'post_bat_score', 'post_fld_score',\n",
              "       'if_fielding_alignment', 'of_fielding_alignment', 'spin_axis',\n",
              "       'delta_home_win_exp', 'delta_run_exp'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['CO_home'] = (all_pitches['home_team'] == 'COL') * 1\n",
        "all_pitches['CO_away'] = (all_pitches['away_team'] == 'COL') * 1\n",
        "all_pitches['CO'] = all_pitches['CO_home'] + all_pitches['CO_away']\n",
        "all_pitches['CO'] = ['CO' if team==1 else 'Other' for team in all_pitches['CO']]\n",
        "all_pitches['stadium'] = ['CO' if home_team=='COL' else 'Other' for home_team in all_pitches['home_team']]\n",
        "all_pitches.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "HYsAuk-qiTgx",
        "outputId": "3f7f18c4-f243-4238-87c2-86d23c863e6d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pitch_type</th>\n",
              "      <th>game_date</th>\n",
              "      <th>release_speed</th>\n",
              "      <th>release_pos_x</th>\n",
              "      <th>release_pos_z</th>\n",
              "      <th>player_name</th>\n",
              "      <th>batter</th>\n",
              "      <th>pitcher</th>\n",
              "      <th>events</th>\n",
              "      <th>description</th>\n",
              "      <th>spin_dir</th>\n",
              "      <th>spin_rate_deprecated</th>\n",
              "      <th>break_angle_deprecated</th>\n",
              "      <th>break_length_deprecated</th>\n",
              "      <th>zone</th>\n",
              "      <th>des</th>\n",
              "      <th>game_type</th>\n",
              "      <th>stand</th>\n",
              "      <th>p_throws</th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>type</th>\n",
              "      <th>hit_location</th>\n",
              "      <th>bb_type</th>\n",
              "      <th>balls</th>\n",
              "      <th>strikes</th>\n",
              "      <th>game_year</th>\n",
              "      <th>pfx_x</th>\n",
              "      <th>pfx_z</th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>on_3b</th>\n",
              "      <th>on_2b</th>\n",
              "      <th>on_1b</th>\n",
              "      <th>outs_when_up</th>\n",
              "      <th>inning</th>\n",
              "      <th>inning_topbot</th>\n",
              "      <th>hc_x</th>\n",
              "      <th>hc_y</th>\n",
              "      <th>tfs_deprecated</th>\n",
              "      <th>...</th>\n",
              "      <th>release_spin_rate</th>\n",
              "      <th>release_extension</th>\n",
              "      <th>game_pk</th>\n",
              "      <th>pitcher.1</th>\n",
              "      <th>fielder_2.1</th>\n",
              "      <th>fielder_3</th>\n",
              "      <th>fielder_4</th>\n",
              "      <th>fielder_5</th>\n",
              "      <th>fielder_6</th>\n",
              "      <th>fielder_7</th>\n",
              "      <th>fielder_8</th>\n",
              "      <th>fielder_9</th>\n",
              "      <th>release_pos_y</th>\n",
              "      <th>estimated_ba_using_speedangle</th>\n",
              "      <th>estimated_woba_using_speedangle</th>\n",
              "      <th>woba_value</th>\n",
              "      <th>woba_denom</th>\n",
              "      <th>babip_value</th>\n",
              "      <th>iso_value</th>\n",
              "      <th>launch_speed_angle</th>\n",
              "      <th>at_bat_number</th>\n",
              "      <th>pitch_number</th>\n",
              "      <th>pitch_name</th>\n",
              "      <th>home_score</th>\n",
              "      <th>away_score</th>\n",
              "      <th>bat_score</th>\n",
              "      <th>fld_score</th>\n",
              "      <th>post_away_score</th>\n",
              "      <th>post_home_score</th>\n",
              "      <th>post_bat_score</th>\n",
              "      <th>post_fld_score</th>\n",
              "      <th>if_fielding_alignment</th>\n",
              "      <th>of_fielding_alignment</th>\n",
              "      <th>spin_axis</th>\n",
              "      <th>delta_home_win_exp</th>\n",
              "      <th>delta_run_exp</th>\n",
              "      <th>CO_home</th>\n",
              "      <th>CO_away</th>\n",
              "      <th>CO</th>\n",
              "      <th>stadium</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SL</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>81.4</td>\n",
              "      <td>-2.95</td>\n",
              "      <td>6.07</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>657077</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Alex Verdugo singles on a ground ball to right...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2021</td>\n",
              "      <td>0.25</td>\n",
              "      <td>-0.55</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>578428.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>178.66</td>\n",
              "      <td>107.68</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>2130.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.27</td>\n",
              "      <td>0.231</td>\n",
              "      <td>0.216</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>50</td>\n",
              "      <td>6</td>\n",
              "      <td>Slider</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>48.0</td>\n",
              "      <td>-0.030</td>\n",
              "      <td>0.397</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.7</td>\n",
              "      <td>3.74</td>\n",
              "      <td>5.23</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>665833</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Oneil Cruz grounds out sharply, first baseman ...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>3.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>159.46</td>\n",
              "      <td>154.57</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>2255.0</td>\n",
              "      <td>6.4</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.13</td>\n",
              "      <td>0.397</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>56</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Infield shift</td>\n",
              "      <td>Standard</td>\n",
              "      <td>115.0</td>\n",
              "      <td>-0.003</td>\n",
              "      <td>-0.103</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>93.6</td>\n",
              "      <td>-2.71</td>\n",
              "      <td>6.18</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>578428</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Jose Iglesias singles on a ground ball to cent...</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.81</td>\n",
              "      <td>1.50</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>103.06</td>\n",
              "      <td>87.86</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>2241.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.28</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>211.0</td>\n",
              "      <td>-0.017</td>\n",
              "      <td>0.148</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CH</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>85.3</td>\n",
              "      <td>-1.75</td>\n",
              "      <td>4.95</td>\n",
              "      <td>Webb, Logan</td>\n",
              "      <td>605170</td>\n",
              "      <td>657277</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Victor Caratini singles on a ground ball to ri...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>SF</td>\n",
              "      <td>SD</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.71</td>\n",
              "      <td>-0.53</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>545350.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>593590.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>Top</td>\n",
              "      <td>176.63</td>\n",
              "      <td>129.03</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>1363.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>632241</td>\n",
              "      <td>657277</td>\n",
              "      <td>457763.0</td>\n",
              "      <td>527038.0</td>\n",
              "      <td>600303.0</td>\n",
              "      <td>446334.0</td>\n",
              "      <td>543063.0</td>\n",
              "      <td>592178.0</td>\n",
              "      <td>573262.0</td>\n",
              "      <td>664774.0</td>\n",
              "      <td>53.87</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.402</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>64</td>\n",
              "      <td>2</td>\n",
              "      <td>Changeup</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>277.0</td>\n",
              "      <td>-0.002</td>\n",
              "      <td>0.910</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.8</td>\n",
              "      <td>3.60</td>\n",
              "      <td>5.34</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>592325</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Ben Gamel flies out to center fielder TJ Friedl.</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>fly_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.19</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>81.15</td>\n",
              "      <td>69.31</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>2205.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.15</td>\n",
              "      <td>0.100</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>55</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Strategic</td>\n",
              "      <td>Standard</td>\n",
              "      <td>113.0</td>\n",
              "      <td>-0.007</td>\n",
              "      <td>-0.163</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 96 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "  pitch_type   game_date  release_speed  ...  CO_away     CO stadium\n",
              "0         SL  2021-10-03           81.4  ...        0  Other   Other\n",
              "1         FF  2021-10-03           88.7  ...        0  Other   Other\n",
              "2         FF  2021-10-03           93.6  ...        0  Other   Other\n",
              "3         CH  2021-10-03           85.3  ...        0  Other   Other\n",
              "4         FF  2021-10-03           88.8  ...        0  Other   Other\n",
              "\n",
              "[5 rows x 96 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, (ax1, ax2) = plt.subplots(1,2, figsize=(20,8))\n",
        "box_plot1 = sns.boxplot(x='stadium', y='launch_speed', data=all_pitches, ax=ax1);\n",
        "box_plot1.set(xlabel='Stadium', title='Launch Speed by Stadium');\n",
        "box_plot2 = sns.boxplot(x='stadium', y='launch_angle', data=all_pitches, ax=ax2);\n",
        "box_plot2.set(xlabel='Stadium', title='Launch Angle by Stadium');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "SPyxt6KEh8wn",
        "outputId": "63c61ffd-b8a9-4629-842c-d3fdfcb45abb"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "left = all_pitches.loc[all_pitches['p_throws'] == 'L'].drop(['events', 'home_team', 'away_team'], axis = 1)\n",
        "right = all_pitches.loc[all_pitches['p_throws'] == 'R'].drop(['events', 'home_team', 'away_team'], axis = 1)\n",
        "left = pd.get_dummies(left, columns = ['stand']).reset_index(drop = True).drop(['p_throws'], axis = 1)\n",
        "right = pd.get_dummies(right, columns = ['stand']).reset_index(drop = True).drop(['p_throws'], axis = 1)\n",
        "all_pitches['HR'] = (all_pitches['events'] == 'home_run') * 1"
      ],
      "metadata": {
        "id": "aUGHmvYQihmW"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax1 = plt.subplots(1, figsize=(20,8))\n",
        "bar = sns.barplot(x='stadium', y='HR', hue='p_throws', data=all_pitches,);\n",
        "bar.set(xlabel='Stadium', ylabel='Probability of HR', title='Home Runs by Stadium by Pitching Arm');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "_zNkJCmDihcJ",
        "outputId": "9d6161a9-0ae9-48d8-fd89-7b1f6fdffff7"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Data Cleaning"
      ],
      "metadata": {
        "id": "o7TXuEaCjZuN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_2021 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2021.csv')\n",
        "df_2020 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2020.csv')\n",
        "df_2019 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2019.csv')\n",
        "df_2018 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2018.csv')\n",
        "df_2017 = pd.read_csv('/content/drive/MyDrive/Data 102 Final Project/savant_data 2017.csv')\n",
        "all_pitches = pd.concat([df_2021, df_2020, df_2019, df_2018, df_2017])\n",
        "all_pitches.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "RQrFwRN-jU0j",
        "outputId": "71d07772-fea3-4622-a710-d30fb279ed62"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pitch_type</th>\n",
              "      <th>game_date</th>\n",
              "      <th>release_speed</th>\n",
              "      <th>release_pos_x</th>\n",
              "      <th>release_pos_z</th>\n",
              "      <th>player_name</th>\n",
              "      <th>batter</th>\n",
              "      <th>pitcher</th>\n",
              "      <th>events</th>\n",
              "      <th>description</th>\n",
              "      <th>spin_dir</th>\n",
              "      <th>spin_rate_deprecated</th>\n",
              "      <th>break_angle_deprecated</th>\n",
              "      <th>break_length_deprecated</th>\n",
              "      <th>zone</th>\n",
              "      <th>des</th>\n",
              "      <th>game_type</th>\n",
              "      <th>stand</th>\n",
              "      <th>p_throws</th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>type</th>\n",
              "      <th>hit_location</th>\n",
              "      <th>bb_type</th>\n",
              "      <th>balls</th>\n",
              "      <th>strikes</th>\n",
              "      <th>game_year</th>\n",
              "      <th>pfx_x</th>\n",
              "      <th>pfx_z</th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>on_3b</th>\n",
              "      <th>on_2b</th>\n",
              "      <th>on_1b</th>\n",
              "      <th>outs_when_up</th>\n",
              "      <th>inning</th>\n",
              "      <th>inning_topbot</th>\n",
              "      <th>hc_x</th>\n",
              "      <th>hc_y</th>\n",
              "      <th>tfs_deprecated</th>\n",
              "      <th>...</th>\n",
              "      <th>hit_distance_sc</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "      <th>release_spin_rate</th>\n",
              "      <th>release_extension</th>\n",
              "      <th>game_pk</th>\n",
              "      <th>pitcher.1</th>\n",
              "      <th>fielder_2.1</th>\n",
              "      <th>fielder_3</th>\n",
              "      <th>fielder_4</th>\n",
              "      <th>fielder_5</th>\n",
              "      <th>fielder_6</th>\n",
              "      <th>fielder_7</th>\n",
              "      <th>fielder_8</th>\n",
              "      <th>fielder_9</th>\n",
              "      <th>release_pos_y</th>\n",
              "      <th>estimated_ba_using_speedangle</th>\n",
              "      <th>estimated_woba_using_speedangle</th>\n",
              "      <th>woba_value</th>\n",
              "      <th>woba_denom</th>\n",
              "      <th>babip_value</th>\n",
              "      <th>iso_value</th>\n",
              "      <th>launch_speed_angle</th>\n",
              "      <th>at_bat_number</th>\n",
              "      <th>pitch_number</th>\n",
              "      <th>pitch_name</th>\n",
              "      <th>home_score</th>\n",
              "      <th>away_score</th>\n",
              "      <th>bat_score</th>\n",
              "      <th>fld_score</th>\n",
              "      <th>post_away_score</th>\n",
              "      <th>post_home_score</th>\n",
              "      <th>post_bat_score</th>\n",
              "      <th>post_fld_score</th>\n",
              "      <th>if_fielding_alignment</th>\n",
              "      <th>of_fielding_alignment</th>\n",
              "      <th>spin_axis</th>\n",
              "      <th>delta_home_win_exp</th>\n",
              "      <th>delta_run_exp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>SL</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>81.4</td>\n",
              "      <td>-2.95</td>\n",
              "      <td>6.07</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>657077</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Alex Verdugo singles on a ground ball to right...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2021</td>\n",
              "      <td>0.25</td>\n",
              "      <td>-0.55</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>578428.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>178.66</td>\n",
              "      <td>107.68</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>53.0</td>\n",
              "      <td>79.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.5</td>\n",
              "      <td>2130.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.27</td>\n",
              "      <td>0.231</td>\n",
              "      <td>0.216</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>50</td>\n",
              "      <td>6</td>\n",
              "      <td>Slider</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>48.0</td>\n",
              "      <td>-0.030</td>\n",
              "      <td>0.397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.7</td>\n",
              "      <td>3.74</td>\n",
              "      <td>5.23</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>665833</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Oneil Cruz grounds out sharply, first baseman ...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>3.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>159.46</td>\n",
              "      <td>154.57</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>30.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>2255.0</td>\n",
              "      <td>6.4</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.13</td>\n",
              "      <td>0.397</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>56</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Infield shift</td>\n",
              "      <td>Standard</td>\n",
              "      <td>115.0</td>\n",
              "      <td>-0.003</td>\n",
              "      <td>-0.103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>93.6</td>\n",
              "      <td>-2.71</td>\n",
              "      <td>6.18</td>\n",
              "      <td>Adon, Joan</td>\n",
              "      <td>578428</td>\n",
              "      <td>672851</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Jose Iglesias singles on a ground ball to cent...</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>BOS</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.81</td>\n",
              "      <td>1.50</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Top</td>\n",
              "      <td>103.06</td>\n",
              "      <td>87.86</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>42.0</td>\n",
              "      <td>94.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93.5</td>\n",
              "      <td>2241.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>632234</td>\n",
              "      <td>672851</td>\n",
              "      <td>488671.0</td>\n",
              "      <td>475582.0</td>\n",
              "      <td>474568.0</td>\n",
              "      <td>666198.0</td>\n",
              "      <td>444876.0</td>\n",
              "      <td>605137.0</td>\n",
              "      <td>657041.0</td>\n",
              "      <td>665742.0</td>\n",
              "      <td>54.28</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>211.0</td>\n",
              "      <td>-0.017</td>\n",
              "      <td>0.148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CH</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>85.3</td>\n",
              "      <td>-1.75</td>\n",
              "      <td>4.95</td>\n",
              "      <td>Webb, Logan</td>\n",
              "      <td>605170</td>\n",
              "      <td>657277</td>\n",
              "      <td>single</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Victor Caratini singles on a ground ball to ri...</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>SF</td>\n",
              "      <td>SD</td>\n",
              "      <td>X</td>\n",
              "      <td>9.0</td>\n",
              "      <td>ground_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2021</td>\n",
              "      <td>-0.71</td>\n",
              "      <td>-0.53</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>545350.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>593590.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>Top</td>\n",
              "      <td>176.63</td>\n",
              "      <td>129.03</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>28.0</td>\n",
              "      <td>107.2</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>86.2</td>\n",
              "      <td>1363.0</td>\n",
              "      <td>6.6</td>\n",
              "      <td>632241</td>\n",
              "      <td>657277</td>\n",
              "      <td>457763.0</td>\n",
              "      <td>527038.0</td>\n",
              "      <td>600303.0</td>\n",
              "      <td>446334.0</td>\n",
              "      <td>543063.0</td>\n",
              "      <td>592178.0</td>\n",
              "      <td>573262.0</td>\n",
              "      <td>664774.0</td>\n",
              "      <td>53.87</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.402</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>64</td>\n",
              "      <td>2</td>\n",
              "      <td>Changeup</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Standard</td>\n",
              "      <td>277.0</td>\n",
              "      <td>-0.002</td>\n",
              "      <td>0.910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>FF</td>\n",
              "      <td>2021-10-03</td>\n",
              "      <td>88.8</td>\n",
              "      <td>3.60</td>\n",
              "      <td>5.34</td>\n",
              "      <td>Sanmartin, Reiver</td>\n",
              "      <td>592325</td>\n",
              "      <td>665665</td>\n",
              "      <td>field_out</td>\n",
              "      <td>hit_into_play</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Ben Gamel flies out to center fielder TJ Friedl.</td>\n",
              "      <td>R</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>CIN</td>\n",
              "      <td>X</td>\n",
              "      <td>8.0</td>\n",
              "      <td>fly_ball</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2021</td>\n",
              "      <td>1.06</td>\n",
              "      <td>1.19</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Bot</td>\n",
              "      <td>81.15</td>\n",
              "      <td>69.31</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>340.0</td>\n",
              "      <td>92.4</td>\n",
              "      <td>28.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>2205.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>632240</td>\n",
              "      <td>665665</td>\n",
              "      <td>663886.0</td>\n",
              "      <td>458015.0</td>\n",
              "      <td>663697.0</td>\n",
              "      <td>553993.0</td>\n",
              "      <td>676480.0</td>\n",
              "      <td>621011.0</td>\n",
              "      <td>670770.0</td>\n",
              "      <td>606157.0</td>\n",
              "      <td>54.15</td>\n",
              "      <td>0.100</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>55</td>\n",
              "      <td>1</td>\n",
              "      <td>4-Seam Fastball</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Strategic</td>\n",
              "      <td>Standard</td>\n",
              "      <td>113.0</td>\n",
              "      <td>-0.007</td>\n",
              "      <td>-0.163</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 92 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "  pitch_type   game_date  ...  delta_home_win_exp  delta_run_exp\n",
              "0         SL  2021-10-03  ...              -0.030          0.397\n",
              "1         FF  2021-10-03  ...              -0.003         -0.103\n",
              "2         FF  2021-10-03  ...              -0.017          0.148\n",
              "3         CH  2021-10-03  ...              -0.002          0.910\n",
              "4         FF  2021-10-03  ...              -0.007         -0.163\n",
              "\n",
              "[5 rows x 92 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches = all_pitches[[ 'events', 'stand', 'p_throws', 'home_team', 'plate_x', \n",
        "                           'plate_z', 'launch_speed', 'launch_angle', 'effective_speed']]\n",
        "all_pitches.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "8jvCBUPXMynV",
        "outputId": "75baf544-1158-4750-8c66-73bbf9e7b401"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>events</th>\n",
              "      <th>stand</th>\n",
              "      <th>p_throws</th>\n",
              "      <th>home_team</th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>single</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>79.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>field_out</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>106.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>88.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>single</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>94.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>single</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>SF</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>107.2</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>86.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>field_out</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>92.4</td>\n",
              "      <td>28.0</td>\n",
              "      <td>88.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      events stand p_throws  ... launch_speed  launch_angle  effective_speed\n",
              "0     single     L        R  ...         79.6           3.0             81.5\n",
              "1  field_out     L        L  ...        106.0          -4.0             88.9\n",
              "2     single     R        R  ...         94.8           0.0             93.5\n",
              "3     single     L        R  ...        107.2          -3.0             86.2\n",
              "4  field_out     L        L  ...         92.4          28.0             88.9\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['home_team'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VXDGznLcbYqW",
        "outputId": "9f7904d4-c4c0-43fc-f64c-f8b08ad88c00"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COL    7428\n",
              "BAL    7393\n",
              "KC     7230\n",
              "DET    7222\n",
              "TOR    7176\n",
              "ARI    7171\n",
              "SF     7081\n",
              "ATL    6971\n",
              "WSH    6840\n",
              "TEX    6824\n",
              "PHI    6808\n",
              "NYM    6735\n",
              "MIN    6697\n",
              "PIT    6695\n",
              "BOS    6692\n",
              "MIA    6684\n",
              "CHC    6630\n",
              "NYY    6628\n",
              "CWS    6575\n",
              "LAA    6501\n",
              "CLE    6466\n",
              "STL    6462\n",
              "OAK    6396\n",
              "TB     6236\n",
              "HOU    6217\n",
              "SEA    6186\n",
              "SD     6053\n",
              "MIL    6042\n",
              "CIN    5982\n",
              "LAD    5979\n",
              "Name: home_team, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['CO_home'] = (all_pitches['home_team'] == 'COL') * 1\n",
        "all_pitches.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "53IojSzNPnOq",
        "outputId": "89e62c50-dbe4-4abe-83da-1eb21488ff66"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>events</th>\n",
              "      <th>stand</th>\n",
              "      <th>p_throws</th>\n",
              "      <th>home_team</th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "      <th>CO_home</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>single</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>79.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>field_out</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>106.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>single</td>\n",
              "      <td>R</td>\n",
              "      <td>R</td>\n",
              "      <td>WSH</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>94.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93.5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>single</td>\n",
              "      <td>L</td>\n",
              "      <td>R</td>\n",
              "      <td>SF</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>107.2</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>86.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>field_out</td>\n",
              "      <td>L</td>\n",
              "      <td>L</td>\n",
              "      <td>PIT</td>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>92.4</td>\n",
              "      <td>28.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      events stand p_throws  ... launch_angle  effective_speed  CO_home\n",
              "0     single     L        R  ...          3.0             81.5        0\n",
              "1  field_out     L        L  ...         -4.0             88.9        0\n",
              "2     single     R        R  ...          0.0             93.5        0\n",
              "3     single     L        R  ...         -3.0             86.2        0\n",
              "4  field_out     L        L  ...         28.0             88.9        0\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['events'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5lVW84A_cbbp",
        "outputId": "d9db169b-117e-4261-f38b-34d34098d178"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "field_out                    115819\n",
              "single                        41625\n",
              "double                        13060\n",
              "home_run                      10023\n",
              "force_out                      5695\n",
              "grounded_into_double_play      5605\n",
              "field_error                    2039\n",
              "sac_fly                        1836\n",
              "triple                         1264\n",
              "sac_bunt                       1164\n",
              "double_play                     682\n",
              "fielders_choice                 620\n",
              "fielders_choice_out             519\n",
              "sac_fly_double_play              26\n",
              "catcher_interf                   15\n",
              "triple_play                       6\n",
              "sac_bunt_double_play              2\n",
              "Name: events, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_pitches['HR'] = (all_pitches['events'] == 'home_run') * 1"
      ],
      "metadata": {
        "id": "JldVIsD-b2UG"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "left = all_pitches.loc[all_pitches['p_throws'] == 'L'].drop(['events', 'home_team'], axis = 1)\n",
        "right = all_pitches.loc[all_pitches['p_throws'] == 'R'].drop(['events', 'home_team'], axis = 1)\n",
        "left = pd.get_dummies(left, columns = ['stand']).reset_index(drop = True).drop(['p_throws', 'stand_L'], axis = 1)\n",
        "right = pd.get_dummies(right, columns = ['stand']).reset_index(drop = True).drop(['p_throws', 'stand_L'], axis = 1)\n",
        "left.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "DV5xQxdVcrGS",
        "outputId": "f78de76f-7e0a-433c-c9f3-959775d39baa"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "      <th>CO_home</th>\n",
              "      <th>HR</th>\n",
              "      <th>stand_R</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.25</td>\n",
              "      <td>2.91</td>\n",
              "      <td>106.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.18</td>\n",
              "      <td>3.05</td>\n",
              "      <td>92.4</td>\n",
              "      <td>28.0</td>\n",
              "      <td>88.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.04</td>\n",
              "      <td>2.00</td>\n",
              "      <td>101.5</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>86.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.35</td>\n",
              "      <td>2.13</td>\n",
              "      <td>83.7</td>\n",
              "      <td>23.0</td>\n",
              "      <td>81.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.66</td>\n",
              "      <td>3.05</td>\n",
              "      <td>97.2</td>\n",
              "      <td>33.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   plate_x  plate_z  launch_speed  ...  CO_home  HR  stand_R\n",
              "0     0.25     2.91         106.0  ...        0   0        0\n",
              "1     0.18     3.05          92.4  ...        0   0        0\n",
              "2    -0.04     2.00         101.5  ...        0   0        0\n",
              "3     1.35     2.13          83.7  ...        0   0        1\n",
              "4     0.66     3.05          97.2  ...        0   1        0\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Obtain propensity scores"
      ],
      "metadata": {
        "id": "BMpiBClkjgwp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "#Right-Handed Pitchers\n",
        "right = right.dropna()\n",
        "r_X = right.drop(['CO_home', 'HR'], axis = 1)\n",
        "r_y = right[['CO_home']]\n",
        "r_model = LogisticRegression(random_state = 0, max_iter = 50).fit(r_X, r_y)\n",
        "r_prob = r_model.predict_proba(r_X)[:, 1]\n",
        "sns.histplot(r_prob)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ikCDMRkpHFA-",
        "outputId": "06fd919a-5e26-4150-ea39-79ac534905f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:985: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed422f590>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Left-Handed Pitchers\n",
        "left = left.dropna()\n",
        "l_X = left.drop(['CO_home', 'HR'], axis = 1)\n",
        "l_y = left[['CO_home']]\n",
        "l_model = LogisticRegression(random_state = 0, max_iter = 10).fit(l_X, l_y)\n",
        "l_prob = l_model.predict_proba(l_X)[:, 1]\n",
        "sns.histplot(l_prob)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "1FZc59ZoHE9h",
        "outputId": "c4b7fb7e-9af1-43fa-c284-e134867b135a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:985: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed3e61e50>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "right['propensity'] = r_prob\n",
        "left['propensity'] = l_prob\n",
        "right.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "lXEThOEvHE73",
        "outputId": "c54b48ed-6677-44fb-b2df-63fae162d3bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>plate_x</th>\n",
              "      <th>plate_z</th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>effective_speed</th>\n",
              "      <th>CO_home</th>\n",
              "      <th>HR</th>\n",
              "      <th>stand_R</th>\n",
              "      <th>propensity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.19</td>\n",
              "      <td>1.80</td>\n",
              "      <td>79.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.051041</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.04</td>\n",
              "      <td>1.79</td>\n",
              "      <td>94.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.034922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.03</td>\n",
              "      <td>1.92</td>\n",
              "      <td>107.2</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>86.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.063312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.17</td>\n",
              "      <td>2.41</td>\n",
              "      <td>75.4</td>\n",
              "      <td>22.0</td>\n",
              "      <td>82.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.040614</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.43</td>\n",
              "      <td>2.87</td>\n",
              "      <td>68.7</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>90.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.046125</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   plate_x  plate_z  launch_speed  ...  HR  stand_R  propensity\n",
              "0    -0.19     1.80          79.6  ...   0        0    0.051041\n",
              "1    -0.04     1.79          94.8  ...   0        1    0.034922\n",
              "2    -0.03     1.92         107.2  ...   0        0    0.063312\n",
              "3     1.17     2.41          75.4  ...   0        1    0.040614\n",
              "4     1.43     2.87          68.7  ...   0        1    0.046125\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Calculate the IPW estimate of the Average Treatment Effect"
      ],
      "metadata": {
        "id": "lk9zATISjkxY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def IPW(table):\n",
        "  COL = table.loc[table['CO_home'] == 1]\n",
        "  other = table.loc[table['CO_home'] == 0]\n",
        "  COL_mean = 1/COL.shape[0] * sum(COL['HR'] / COL['propensity'])\n",
        "  other_mean = 1/other.shape[0] * sum(other['HR'] / (1 - other['propensity']))\n",
        "  return COL_mean - other_mean"
      ],
      "metadata": {
        "id": "U0VA5pGLHEob"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "IPW(right)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Z26pcuNHEke",
        "outputId": "7119b9ee-607a-4535-f04f-4105fb76b748"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.5712612181589716"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IPW(left)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9mgGTuuSHEhN",
        "outputId": "f7d41f99-6e69-4288-a716-d2ed3f85736b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.1846934503670186"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Attempted Matching Code \n",
        "*(Did not let matching fuction complete because it was too computationally expensive and was running for 2 hours at that point with over 5,000 more matches to find)*"
      ],
      "metadata": {
        "id": "va0iLElvjspa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Break all continuous into categorical with bins. Sort each set of values, find 0, 20, 40, 60, 80, 100 bins. Change everything to categorical"
      ],
      "metadata": {
        "id": "5IuEn5PgBSZM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def discretization(table):\n",
        "  cols = ['launch_speed', 'launch_angle']\n",
        "  for i in np.arange(len(cols)):\n",
        "    a, b, c, d = table[cols[i]].quantile([0.2, 0.4, 0.6, 0.8])\n",
        "    for j in np.arange(len(cols[i])):\n",
        "      value = table[cols[i]][j]\n",
        "      if (value >= min(table[cols[i]])) & (value < a):\n",
        "          table[cols[i]].loc[j] = 1\n",
        "      elif (value >= a) & (value < b):\n",
        "          table[cols[i]].loc[j] = 2\n",
        "      elif (value >= b) & (value < c):\n",
        "          table[cols[i]].loc[j] = 3\n",
        "      elif (value >= c) & (value < d):\n",
        "          table[cols[i]].loc[j] = 4\n",
        "      else:\n",
        "          table[cols[i]].loc[j] = 5\n",
        "\n",
        "discretization(left)\n",
        "discretization(right)\n",
        "left.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "VclPIV9HYxIH",
        "outputId": "aa8927ce-38a5-4ab2-d55a-b42fce9ef13f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>CO_home</th>\n",
              "      <th>CO_away</th>\n",
              "      <th>HR</th>\n",
              "      <th>stand_R</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   launch_speed  launch_angle  CO_home  CO_away  HR  stand_R\n",
              "0           5.0           2.0        0        0   0        0\n",
              "1           3.0           4.0        0        0   0        0\n",
              "2           5.0           2.0        0        0   0        0\n",
              "3           2.0           4.0        0        0   0        1\n",
              "4           4.0           4.0        0        0   1        0"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Break into COL home and all other games. Match and use technique in lab, estimating HR"
      ],
      "metadata": {
        "id": "eEZ0b4FWJajz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "left_COL = left[left['CO_home'] == 1].drop(['CO_home', 'CO_away'], axis = 1)\n",
        "left_other = left[left['CO_home'] == 0].drop(['CO_home', 'CO_away'], axis = 1)\n",
        "right_COL = right[right['CO_home'] == 1].drop(['CO_home', 'CO_away'], axis = 1)\n",
        "right_other = right[right['CO_home'] == 0].drop(['CO_home', 'CO_away'], axis = 1)\n",
        "right_other.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "xuMQHfCAmdks",
        "outputId": "dc3f2d7d-7767-4bd9-bd15-01705a5ffa3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>launch_speed</th>\n",
              "      <th>launch_angle</th>\n",
              "      <th>HR</th>\n",
              "      <th>stand_R</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   launch_speed  launch_angle  HR  stand_R\n",
              "0           2.0           2.0   0        0\n",
              "1           4.0           2.0   0        1\n",
              "2           5.0           2.0   0        0\n",
              "3           1.0           4.0   0        1\n",
              "4           1.0           2.0   0        1"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#can use for loop on list of true indexes if number index doesn't work\n",
        "def match(COL, other):\n",
        "  cols = ['stand_L', 'stand_R', 'launch_speed', 'launch_angle']\n",
        "  COLx = COL.drop(['HR'], axis = 1)\n",
        "  otherx = other.drop(['HR'], axis = 1)\n",
        "  dic = {}\n",
        "  for i in np.arange(COLx.shape[0]):\n",
        "    row = COLx.iloc[i]\n",
        "    used = []\n",
        "    for j in np.arange(otherx.shape[0]):\n",
        "      if j in used:\n",
        "        continue\n",
        "      if row.equals(otherx.iloc[j]):\n",
        "        dic[str(i)] = j\n",
        "        used = np.append(used, j)\n",
        "        print(len(dic))\n",
        "        break\n",
        "\n",
        "  d = list(dic.keys())\n",
        "  keys = []\n",
        "  for i in np.arange(len(d)):\n",
        "    keys = np.append(keys, int(d[i]))\n",
        "\n",
        "  COL = COL.iloc[keys]\n",
        "  other = other.iloc[list(dic.values())]"
      ],
      "metadata": {
        "id": "uA-HKiDSFwhl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match(right_COL, right_other)\n",
        "match(left_COL, left_other)\n",
        "left_COL.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lhW9Vgma-ioC",
        "outputId": "b1793fce-8f65-4dd7-91cd-f34ae1f86d8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n",
            "11\n",
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "16\n",
            "17\n",
            "18\n",
            "19\n",
            "20\n",
            "21\n",
            "22\n",
            "23\n",
            "24\n",
            "25\n",
            "26\n",
            "27\n",
            "28\n",
            "29\n",
            "30\n",
            "31\n",
            "32\n",
            "33\n",
            "34\n",
            "35\n",
            "36\n",
            "37\n",
            "38\n",
            "39\n",
            "40\n",
            "41\n",
            "42\n",
            "43\n",
            "44\n",
            "45\n",
            "46\n",
            "47\n",
            "48\n",
            "49\n",
            "50\n",
            "51\n",
            "52\n",
            "53\n",
            "54\n",
            "55\n",
            "56\n",
            "57\n",
            "58\n",
            "59\n",
            "60\n",
            "61\n",
            "62\n",
            "63\n",
            "64\n",
            "65\n",
            "66\n",
            "67\n",
            "68\n",
            "69\n",
            "70\n",
            "71\n",
            "72\n",
            "73\n",
            "74\n",
            "75\n",
            "76\n",
            "77\n",
            "78\n",
            "79\n",
            "80\n",
            "81\n",
            "82\n",
            "83\n",
            "84\n",
            "85\n",
            "86\n",
            "87\n",
            "88\n",
            "89\n",
            "90\n",
            "91\n",
            "92\n",
            "93\n",
            "94\n",
            "95\n",
            "96\n",
            "97\n",
            "98\n",
            "99\n",
            "100\n",
            "101\n",
            "102\n",
            "103\n",
            "104\n",
            "105\n",
            "106\n",
            "107\n",
            "108\n",
            "109\n",
            "110\n",
            "111\n",
            "112\n",
            "113\n",
            "114\n",
            "115\n",
            "116\n",
            "117\n",
            "118\n",
            "119\n",
            "120\n",
            "121\n",
            "122\n",
            "123\n",
            "124\n",
            "125\n",
            "126\n",
            "127\n",
            "128\n",
            "129\n",
            "130\n",
            "131\n",
            "132\n",
            "133\n",
            "134\n",
            "135\n",
            "136\n",
            "137\n",
            "138\n",
            "139\n",
            "140\n",
            "141\n",
            "142\n",
            "143\n",
            "144\n",
            "145\n",
            "146\n",
            "147\n",
            "148\n",
            "149\n",
            "150\n",
            "151\n",
            "152\n",
            "153\n",
            "154\n",
            "155\n",
            "156\n",
            "157\n",
            "158\n",
            "159\n",
            "160\n",
            "161\n",
            "162\n",
            "163\n",
            "164\n",
            "165\n",
            "166\n",
            "167\n",
            "168\n",
            "169\n",
            "170\n",
            "171\n",
            "172\n",
            "173\n",
            "174\n",
            "175\n",
            "176\n",
            "177\n",
            "178\n",
            "179\n",
            "180\n",
            "181\n",
            "182\n",
            "183\n",
            "184\n",
            "185\n",
            "186\n",
            "187\n",
            "188\n",
            "189\n",
            "190\n",
            "191\n",
            "192\n",
            "193\n",
            "194\n",
            "195\n",
            "196\n",
            "197\n",
            "198\n",
            "199\n",
            "200\n",
            "201\n",
            "202\n",
            "203\n",
            "204\n",
            "205\n",
            "206\n",
            "207\n",
            "208\n",
            "209\n",
            "210\n",
            "211\n",
            "212\n",
            "213\n",
            "214\n",
            "215\n",
            "216\n",
            "217\n",
            "218\n",
            "219\n",
            "220\n",
            "221\n",
            "222\n",
            "223\n",
            "224\n",
            "225\n",
            "226\n",
            "227\n",
            "228\n",
            "229\n",
            "230\n",
            "231\n",
            "232\n",
            "233\n",
            "234\n",
            "235\n",
            "236\n",
            "237\n",
            "238\n",
            "239\n",
            "240\n",
            "241\n",
            "242\n",
            "243\n",
            "244\n",
            "245\n",
            "246\n",
            "247\n",
            "248\n",
            "249\n",
            "250\n",
            "251\n",
            "252\n",
            "253\n",
            "254\n",
            "255\n",
            "256\n",
            "257\n",
            "258\n",
            "259\n",
            "260\n",
            "261\n",
            "262\n",
            "263\n",
            "264\n",
            "265\n",
            "266\n",
            "267\n",
            "268\n",
            "269\n",
            "270\n",
            "271\n",
            "272\n",
            "273\n",
            "274\n",
            "275\n",
            "276\n",
            "277\n",
            "278\n",
            "279\n",
            "280\n",
            "281\n",
            "282\n",
            "283\n",
            "284\n",
            "285\n",
            "286\n",
            "287\n",
            "288\n",
            "289\n",
            "290\n",
            "291\n",
            "292\n",
            "293\n",
            "294\n",
            "295\n",
            "296\n",
            "297\n",
            "298\n",
            "299\n",
            "300\n",
            "301\n",
            "302\n",
            "303\n",
            "304\n",
            "305\n",
            "306\n",
            "307\n",
            "308\n",
            "309\n",
            "310\n",
            "311\n",
            "312\n",
            "313\n",
            "314\n",
            "315\n",
            "316\n",
            "317\n",
            "318\n",
            "319\n",
            "320\n",
            "321\n",
            "322\n",
            "323\n",
            "324\n",
            "325\n",
            "326\n",
            "327\n",
            "328\n",
            "329\n",
            "330\n",
            "331\n",
            "332\n",
            "333\n",
            "334\n",
            "335\n",
            "336\n",
            "337\n",
            "338\n",
            "339\n",
            "340\n",
            "341\n",
            "342\n",
            "343\n",
            "344\n",
            "345\n",
            "346\n",
            "347\n",
            "348\n",
            "349\n",
            "350\n",
            "351\n",
            "352\n",
            "353\n",
            "354\n",
            "355\n",
            "356\n",
            "357\n",
            "358\n",
            "359\n",
            "360\n",
            "361\n",
            "362\n",
            "363\n",
            "364\n",
            "365\n",
            "366\n",
            "367\n",
            "368\n",
            "369\n",
            "370\n",
            "371\n",
            "372\n",
            "373\n",
            "374\n",
            "375\n",
            "376\n",
            "377\n",
            "378\n",
            "379\n",
            "380\n",
            "381\n",
            "382\n",
            "383\n",
            "384\n",
            "385\n",
            "386\n",
            "387\n",
            "388\n",
            "389\n",
            "390\n",
            "391\n",
            "392\n",
            "393\n",
            "394\n",
            "395\n",
            "396\n",
            "397\n",
            "398\n",
            "399\n",
            "400\n",
            "401\n",
            "402\n",
            "403\n",
            "404\n",
            "405\n",
            "406\n",
            "407\n",
            "408\n",
            "409\n",
            "410\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "right_COL.to_csv('right_COL.csv') \n",
        "\n",
        "!cp right_COL.csv \"drive/My Drive/Data 102 Final Project\""
      ],
      "metadata": {
        "id": "S2tWtmUQrGeE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "right_other.to_csv('right_other.csv') \n",
        "\n",
        "!cp right_other.csv \"drive/My Drive/Data 102 Final Project\""
      ],
      "metadata": {
        "id": "7Oa2j43EBnGZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "left_COL.to_csv('left_COL.csv') \n",
        "\n",
        "!cp left_COL.csv \"drive/My Drive/Data 102 Final Project\""
      ],
      "metadata": {
        "id": "Io2id98hD5Z1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "left_other.to_csv('left_other.csv') \n",
        "\n",
        "!cp left_other.csv \"drive/My Drive/Data 102 Final Project\""
      ],
      "metadata": {
        "id": "965qIbWSD_FM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def matching_treatment_effect(COL, other):\n",
        "  #Treated\n",
        "  untreated_avg = np.mean(other['HR'])\n",
        "  COL['HR_'] = COL['HR'] - untreated_avg\n",
        "\n",
        "  #Untreated\n",
        "  treated_avg = np.mean(COL['HR'])\n",
        "  other['HR_'] = other['HR'] - treated_avg\n",
        "\n",
        "  return (np.mean(COL['HR_']) + np.mean(other['HR_'])) / 2"
      ],
      "metadata": {
        "id": "jvogtbst8bH6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "treatment_effect(right_COL, right_other)"
      ],
      "metadata": {
        "id": "xDIplr9TEMPI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "treatment_effect(left_COL, left_other)"
      ],
      "metadata": {
        "id": "A35NlhXfB2kf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
